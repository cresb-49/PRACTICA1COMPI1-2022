
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.carlos.pruebas.lexerParser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserGraphics extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserGraphicsSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserGraphics() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserGraphics(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserGraphics(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\006\000\002\003\006\000\002\004\010" +
    "\000\002\004\007\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\004\004\004\001\002\000\006\005\021\006" +
    "\020\001\002\000\004\002\017\001\002\000\006\004\004" +
    "\021\007\001\002\000\004\026\012\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002\000\004\037\013" +
    "\001\002\000\004\027\014\001\002\000\004\036\015\001" +
    "\002\000\006\002\ufffb\021\007\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\000\001\002\000\004\032\024\001" +
    "\002\000\004\032\022\001\002\000\004\033\023\001\002" +
    "\000\006\004\ufffe\021\ufffe\001\002\000\004\033\025\001" +
    "\002\000\006\004\ufffd\021\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\007\003\005\004\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserGraphics$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserGraphics$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserGraphics$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexer.next_token(); 
    }


    // Connect this parser to a scanner!
    private Lexer lexer;
    
    public ParserGraphics (Lexer lexer){ 
        super(lexer);
        this.lexer=lexer;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserGraphics$actions {
  private final ParserGraphics parser;

  /** Constructor */
  CUP$ParserGraphics$actions(ParserGraphics parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserGraphics$do_action_part00000000(
    int                        CUP$ParserGraphics$act_num,
    java_cup.runtime.lr_parser CUP$ParserGraphics$parser,
    java.util.Stack            CUP$ParserGraphics$stack,
    int                        CUP$ParserGraphics$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserGraphics$result;

      /* select the action based on the action number */
      switch (CUP$ParserGraphics$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= graps s 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		RESULT = start_val;
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserGraphics$parser.done_parsing();
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= graps ej 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // graps ::= DEF GRAPHICBARRA LLA_A LLA_C 
            {
              Object RESULT =null;
		
                                                System.out.println("Grafica de barra");
                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("graps",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // graps ::= DEF GRAPHICPIE LLA_A LLA_C 
            {
              Object RESULT =null;
		
                                                System.out.println("Grafica de pie");
                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("graps",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ej ::= EXECUTE PA_A STRING PA_C PUNTOCOMA ej 
            {
              Object RESULT =null;
		
                                                    System.out.println("Instruccion de ejecucion");
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ej",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ej ::= EXECUTE PA_A STRING PA_C PUNTOCOMA 
            {
              Object RESULT =null;
		
                                                    System.out.println("Instruccion de ejecucion");
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ej",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // e ::= e MAS t 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1 + num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // e ::= e MENOS t 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1 - num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // e ::= t 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = exp;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // t ::= t MUL f 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1*num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // t ::= t DIV f 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1/num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // t ::= f 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = exp;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // f ::= NUMBERS 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                            RESULT = (Double) ((Token)num).getValue();
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // f ::= DECIMAL 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                            RESULT = (Double) ((Token)num).getValue();
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // f ::= PA_A e PA_C 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                            RESULT = exp;
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserGraphics$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserGraphics$do_action(
    int                        CUP$ParserGraphics$act_num,
    java_cup.runtime.lr_parser CUP$ParserGraphics$parser,
    java.util.Stack            CUP$ParserGraphics$stack,
    int                        CUP$ParserGraphics$top)
    throws java.lang.Exception
    {
              return CUP$ParserGraphics$do_action_part00000000(
                               CUP$ParserGraphics$act_num,
                               CUP$ParserGraphics$parser,
                               CUP$ParserGraphics$stack,
                               CUP$ParserGraphics$top);
    }
}

}
