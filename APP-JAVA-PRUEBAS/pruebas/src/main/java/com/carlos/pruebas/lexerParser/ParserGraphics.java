
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.carlos.pruebas.lexerParser;

import com.carlos.pruebas.ED.Pila;
import com.carlos.pruebas.obj.Token;
import com.carlos.pruebas.obj.Union;
import com.carlos.pruebas.obj.GraficaBarra;
import com.carlos.pruebas.obj.GraficaPie;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserGraphics extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserGraphicsSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserGraphics() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserGraphics(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserGraphics(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\002\010\000\002\002\006\000\002\002\006" +
    "\000\002\004\007\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\003\000\002\004\004\000\002" +
    "\003\007\000\002\003\007\000\002\003\010\000\002\003" +
    "\010\000\002\003\007\000\002\003\010\000\002\003\007" +
    "\000\002\003\003\000\002\003\004\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\005\000\002\012\004\000\002\005\005" +
    "\000\002\005\004\000\002\006\005\000\002\006\004\000" +
    "\002\007\011\000\002\007\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\004\004\001\002\000\006\005\153\006" +
    "\152\001\002\000\010\002\010\004\007\021\006\001\002" +
    "\000\004\026\146\001\002\000\006\005\012\006\011\001" +
    "\002\000\004\002\000\001\002\000\004\032\103\001\002" +
    "\000\004\032\013\001\002\000\016\003\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\014\ufff7\033\ufff7\001\002\000\016\003\017" +
    "\007\020\010\022\011\021\014\015\033\016\001\002\000" +
    "\004\035\067\001\002\000\010\002\001\004\001\021\001" +
    "\001\002\000\016\003\ufff6\007\ufff6\010\ufff6\011\ufff6\014" +
    "\ufff6\033\ufff6\001\002\000\004\035\064\001\002\000\004" +
    "\035\033\001\002\000\004\035\023\001\002\000\004\030" +
    "\024\001\002\000\004\037\025\001\002\000\006\031\031" +
    "\034\030\001\002\000\004\036\027\001\002\000\016\003" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\014\ufffa\033\ufffa\001\002" +
    "\000\004\037\025\001\002\000\004\036\uffdf\001\002\000" +
    "\004\036\uffe0\001\002\000\004\030\034\001\002\000\012" +
    "\003\035\026\043\040\041\041\044\001\002\000\012\003" +
    "\035\026\043\040\041\041\044\001\002\000\024\022\uffea" +
    "\023\uffea\024\052\025\053\027\uffea\031\uffea\033\uffea\034" +
    "\uffea\036\uffea\001\002\000\004\036\062\001\002\000\024" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7\031\uffe7\033" +
    "\uffe7\034\uffe7\036\uffe7\001\002\000\024\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\027\uffe6\031\uffe6\033\uffe6\034\uffe6\036" +
    "\uffe6\001\002\000\012\022\046\023\047\031\060\034\057" +
    "\001\002\000\012\003\035\026\043\040\041\041\044\001" +
    "\002\000\024\022\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5" +
    "\031\uffe5\033\uffe5\034\uffe5\036\uffe5\001\002\000\010\022" +
    "\046\023\047\027\050\001\002\000\012\003\035\026\043" +
    "\040\041\041\044\001\002\000\012\003\035\026\043\040" +
    "\041\041\044\001\002\000\024\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\027\uffe4\031\uffe4\033\uffe4\034\uffe4\036\uffe4\001" +
    "\002\000\024\022\uffeb\023\uffeb\024\052\025\053\027\uffeb" +
    "\031\uffeb\033\uffeb\034\uffeb\036\uffeb\001\002\000\012\003" +
    "\035\026\043\040\041\041\044\001\002\000\012\003\035" +
    "\026\043\040\041\041\044\001\002\000\024\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\027\uffe8\031\uffe8\033\uffe8\034\uffe8" +
    "\036\uffe8\001\002\000\024\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\027\uffe9\031\uffe9\033\uffe9\034\uffe9\036\uffe9\001\002" +
    "\000\024\022\uffec\023\uffec\024\052\025\053\027\uffec\031" +
    "\uffec\033\uffec\034\uffec\036\uffec\001\002\000\012\003\035" +
    "\026\043\040\041\041\044\001\002\000\004\036\uffe1\001" +
    "\002\000\004\036\uffe2\001\002\000\016\003\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\014\ufff9\033\ufff9\001\002\000\024\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\031\uffe3\033\uffe3" +
    "\034\uffe3\036\uffe3\001\002\000\004\037\065\001\002\000" +
    "\004\036\066\001\002\000\016\003\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\014\ufffb\033\ufffb\001\002\000\004\030\070\001" +
    "\002\000\004\032\072\001\002\000\004\036\102\001\002" +
    "\000\012\003\035\026\043\040\041\041\044\001\002\000" +
    "\010\022\046\023\047\034\074\001\002\000\012\003\035" +
    "\026\043\040\041\041\044\001\002\000\010\022\046\023" +
    "\047\033\076\001\002\000\006\031\100\034\077\001\002" +
    "\000\004\032\072\001\002\000\004\036\uffdd\001\002\000" +
    "\004\036\uffde\001\002\000\016\003\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\014\ufff8\033\ufff8\001\002\000\024\003\uffee\007" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\017\uffee\020\uffee" +
    "\033\uffee\001\002\000\024\003\112\007\105\012\107\013" +
    "\114\014\111\015\110\017\106\020\115\033\113\001\002" +
    "\000\004\035\143\001\002\000\004\035\140\001\002\000" +
    "\004\035\134\001\002\000\004\035\131\001\002\000\004" +
    "\035\125\001\002\000\024\003\uffed\007\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\017\uffed\020\uffed\033\uffed\001\002" +
    "\000\010\002\uffff\004\uffff\021\uffff\001\002\000\004\035" +
    "\121\001\002\000\004\035\116\001\002\000\004\037\117" +
    "\001\002\000\004\036\120\001\002\000\024\003\uffef\007" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef" +
    "\033\uffef\001\002\000\004\030\122\001\002\000\012\003" +
    "\035\026\043\040\041\041\044\001\002\000\004\036\124" +
    "\001\002\000\024\003\ufff2\007\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\017\ufff2\020\ufff2\033\ufff2\001\002\000\004" +
    "\030\126\001\002\000\004\032\072\001\002\000\004\036" +
    "\130\001\002\000\024\003\ufff0\007\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\017\ufff0\020\ufff0\033\ufff0\001\002\000" +
    "\004\016\132\001\002\000\004\036\133\001\002\000\024" +
    "\003\ufff4\007\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017" +
    "\ufff4\020\ufff4\033\ufff4\001\002\000\004\030\135\001\002" +
    "\000\004\037\025\001\002\000\004\036\137\001\002\000" +
    "\024\003\ufff3\007\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\017\ufff3\020\ufff3\033\ufff3\001\002\000\012\003\035\026" +
    "\043\040\041\041\044\001\002\000\010\022\046\023\047" +
    "\036\142\001\002\000\024\003\ufff1\007\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1\033\ufff1\001\002" +
    "\000\004\037\144\001\002\000\004\036\145\001\002\000" +
    "\024\003\ufff5\007\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\017\ufff5\020\ufff5\033\ufff5\001\002\000\004\037\147\001" +
    "\002\000\004\027\150\001\002\000\004\036\151\001\002" +
    "\000\010\002\ufffe\004\ufffe\021\ufffe\001\002\000\004\032" +
    "\103\001\002\000\004\032\013\001\002\000\016\003\017" +
    "\007\020\010\022\011\021\014\015\033\155\001\002\000" +
    "\010\002\ufffd\004\ufffd\021\ufffd\001\002\000\024\003\112" +
    "\007\105\012\107\013\114\014\111\015\110\017\106\020" +
    "\115\033\157\001\002\000\010\002\ufffc\004\ufffc\021\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\103\001\001\000\004\004\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\036\010" +
    "\041\011\035\012\037\001\001\000\004\012\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\044\011\035" +
    "\012\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\055\012\037\001\001\000\006\011\050\012\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\054\001\001\000\004\012\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\060\010" +
    "\041\011\035\012\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\070\001\001\000\002\001\001\000\010\010" +
    "\072\011\035\012\037\001\001\000\002\001\001\000\010" +
    "\010\074\011\035\012\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\122\010\041\011\035\012\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\140\011\035\012" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\155\001\001\000\004\004\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserGraphics$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserGraphics$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserGraphics$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexer.next_token(); 
    }


    // Connect this parser to a scanner!
    private Lexer lexer;
    
    public ParserGraphics (Lexer lexer){ 
        super(lexer);
        this.lexer=lexer;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("Error sintactico: " + ParserGraphicsSym.terminalNames[cur_token.sym]);
        System.out.println(String.format("Linea: %d,Columna: %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserGraphicsSym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }

    public void semantic_error(Token token,String contexto) {
        System.out.println("Error semantico: " + token.getLexema()+" , "+contexto);
        System.out.println(String.format("Linea: %d,Columna: %d", token.getLinea(), token.getColumna()));
    }

    protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserGraphics$actions {
  private final ParserGraphics parser;

  /** Constructor */
  CUP$ParserGraphics$actions(ParserGraphics parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserGraphics$do_action_part00000000(
    int                        CUP$ParserGraphics$act_num,
    java_cup.runtime.lr_parser CUP$ParserGraphics$parser,
    java.util.Stack            CUP$ParserGraphics$stack,
    int                        CUP$ParserGraphics$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserGraphics$result;

      /* select the action based on the action number */
      switch (CUP$ParserGraphics$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= s DEF GRAPHICBARRA contBarra LLA_C 
            {
              Object RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                    if(gb!=null){
                                                        System.out.println("Grafica: "+gb.toString());
                                                    }
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		RESULT = start_val;
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserGraphics$parser.done_parsing();
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= s DEF GRAPHICPIE contPie LLA_C 
            {
              Object RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                if(gp!=null){
                                                    System.out.println("Grafica: "+gp.toString());
                                                }
                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= s EXECUTE PA_A STRING PA_C PUNTOCOMA 
            {
              Object RESULT =null;
		int gnleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int gnright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object gn = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		
                                                    System.out.println("Grafico ejecutar: "+(String)((Token)gn).getValue());
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= DEF GRAPHICBARRA contBarra LLA_C 
            {
              Object RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                if(gb!=null){
                                                    System.out.println("Grafica: "+gb.toString());
                                                }
                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s ::= DEF GRAPHICPIE contPie LLA_C 
            {
              Object RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                            if(gp!=null){
                                                System.out.println("Grafica: "+gp.toString());
                                            }
                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contBarra ::= contBarra TITTLE DOSPUNTOS STRING PUNTOCOMA 
            {
              GraficaBarra RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                            if(gb !=null){
                                                                                RESULT = gb;
                                                                                if(RESULT.getTitulo()!=null){
                                                                                    semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                                }else{
                                                                                    String tittle = (String)((Token)titulo).getValue();
                                                                                    RESULT.setTitulo(tittle);
                                                                                }
                                                                            }
                                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contBarra ::= contBarra EJEX DOSPUNTOS CO_A contEjeX PUNTOCOMA 
            {
              GraficaBarra RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                if(gb !=null){
                                                                                    RESULT = gb;
                                                                                    if(RESULT.getEjex()!=null){
                                                                                        semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setEjex(pila.toArray(String[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contBarra ::= contBarra EJEY DOSPUNTOS CO_A contEjeY PUNTOCOMA 
            {
              GraficaBarra RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                if(gb !=null){
                                                                                    RESULT = gb;
                                                                                    if(RESULT.getEjey()!=null){
                                                                                        semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setEjey(pila.toArray(Double[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contBarra ::= contBarra LINK DOSPUNTOS CO_A contUnir PUNTOCOMA 
            {
              GraficaBarra RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                
                                                                                if(gb !=null){
                                                                                    RESULT = gb;
                                                                                    if(RESULT.getUnir()!=null){
                                                                                        semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setUnir(pila.toArrayList());
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contBarra ::= LLA_A 
            {
              GraficaBarra RESULT =null;
		
                                                                                RESULT = new GraficaBarra();
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contBarra ::= contBarra error 
            {
              GraficaBarra RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contPie ::= contPie TITTLE DOSPUNTOS STRING PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                            if(gp!=null){
                                                                                RESULT = gp;
                                                                                if(RESULT.getTitulo()!=null){
                                                                                    semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                                }else{
                                                                                    RESULT.setTitulo((String)((Token)titulo).getValue());
                                                                                }
                                                                            }
                                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contPie ::= contPie TYPE DOSPUNTOS TYPEVALUE PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                            if(gp!=null){
                                                                                RESULT = gp;
                                                                                if(RESULT.getTipo()!=null){
                                                                                    semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                                }else{
                                                                                    RESULT.setTipo((String)((Token)tipo).getValue());
                                                                                }
                                                                                
                                                                            }
                                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contPie ::= contPie LABEL DOSPUNTOS CO_A contEjeX PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                
                                                                                if(gp!=null){
                                                                                    RESULT = gp;
                                                                                    if(RESULT.getEtiquetas()!=null){
                                                                                        semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setEtiquetas(pila.toArray(String[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contPie ::= contPie VALUES DOSPUNTOS CO_A contEjeY PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                
                                                                                if(gp!=null){
                                                                                    RESULT = gp;
                                                                                    if(RESULT.getValores()!=null){
                                                                                        semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setValores(pila.toArray(Double[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // contPie ::= contPie TOTAL DOSPUNTOS e PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                    if(gp!=null){
                                                                        RESULT = gp;
                                                                        if(RESULT.getTotal()!=null){
                                                                            semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                        }else{
                                                                            if(num!=null){
                                                                                RESULT.setTotal(num);
                                                                            }
                                                                        }
                                                                    }
                                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contPie ::= contPie LINK DOSPUNTOS CO_A contUnir PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                
                                                                                if(gp!=null){
                                                                                    RESULT = gp;
                                                                                    if(RESULT.getUnir()!=null){
                                                                                        semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setUnir(pila.toArrayList());
                                                                                        }
                                                                                    }
                                                                                }
                                                                                
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contPie ::= contPie EXTRA DOSPUNTOS STRING PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int extraleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int extraright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object extra = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                        if(gp!=null){
                                                                            RESULT = gp;
                                                                            if(RESULT.getExtra()!=null){
                                                                                semantic_error(((Token)e),"la propiedad ya habia sido definida");
                                                                            }else{
                                                                                RESULT.setExtra((String)((Token)extra).getValue());
                                                                            }
                                                                        }
                                                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contPie ::= LLA_A 
            {
              GraficaPie RESULT =null;
		
                            RESULT = new GraficaPie();
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contPie ::= contPie error 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // e ::= e MAS t 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1 + num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // e ::= e MENOS t 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1 - num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // e ::= t 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = exp;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // t ::= t MUL f 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1*num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",7, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // t ::= t DIV f 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1/num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",7, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // t ::= f 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = exp;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",7, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // f ::= NUMBERS 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                            RESULT = (Double) ((Token)num).getValue();
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // f ::= DECIMAL 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                            RESULT = (Double) ((Token)num).getValue();
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // f ::= PA_A e PA_C 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                            RESULT = exp;
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // f ::= error f 
            {
              Double RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contEjeY ::= e COMA contEjeY 
            {
              Pila<Double> RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                RESULT = pila;
                                                if(RESULT != null){
                                                    RESULT.push(num1);
                                                }
                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeY",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contEjeY ::= e CO_C 
            {
              Pila<Double> RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                RESULT = new Pila<>();
                                RESULT.push(num1);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeY",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contEjeX ::= STRING COMA contEjeX 
            {
              Pila<String> RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                        RESULT = pila;
                                                        if(RESULT!=null){
                                                            String strin = (String)((Token)cadena).getValue();
                                                            RESULT.push(strin);                    
                                                        }
                                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeX",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // contEjeX ::= STRING CO_C 
            {
              Pila<String> RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                        RESULT = new Pila<>();
                                        String strin = (String)((Token)cadena).getValue();
                                        RESULT.push(strin);
                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeX",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // contUnir ::= LLA_A e COMA e LLA_C COMA contUnir 
            {
              Pila<Union> RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                                        RESULT = pila;
                                                                        if(RESULT!=null){
                                                                            RESULT.push(new Union(num1.intValue(),num2.intValue()));    
                                                                        }
                                                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contUnir",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-6)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contUnir ::= LLA_A e COMA e LLA_C CO_C 
            {
              Pila<Union> RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		
                                                                        RESULT = new Pila<>();
                                                                        RESULT.push(new Union(num1.intValue(),num2.intValue()));
                                                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contUnir",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserGraphics$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserGraphics$do_action(
    int                        CUP$ParserGraphics$act_num,
    java_cup.runtime.lr_parser CUP$ParserGraphics$parser,
    java.util.Stack            CUP$ParserGraphics$stack,
    int                        CUP$ParserGraphics$top)
    throws java.lang.Exception
    {
              return CUP$ParserGraphics$do_action_part00000000(
                               CUP$ParserGraphics$act_num,
                               CUP$ParserGraphics$parser,
                               CUP$ParserGraphics$stack,
                               CUP$ParserGraphics$top);
    }
}

}
