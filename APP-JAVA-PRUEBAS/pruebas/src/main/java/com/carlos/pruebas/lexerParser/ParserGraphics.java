
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.carlos.pruebas.lexerParser;

import com.carlos.pruebas.ED.Pila;
import com.carlos.pruebas.obj.Token;
import com.carlos.pruebas.obj.Union;
import com.carlos.pruebas.obj.GraficaBarra;
import com.carlos.pruebas.obj.GraficaPie;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserGraphics extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserGraphicsSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserGraphics() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserGraphics(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserGraphics(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\006\000\002\003\006" +
    "\000\002\004\010\000\002\004\007\000\002\006\007\000" +
    "\002\006\010\000\002\006\010\000\002\006\010\000\002" +
    "\006\003\000\002\007\005\000\002\007\004\000\002\010" +
    "\005\000\002\010\004\000\002\011\011\000\002\011\010" +
    "\000\002\005\007\000\002\005\007\000\002\005\010\000" +
    "\002\005\010\000\002\005\007\000\002\005\010\000\002" +
    "\005\007\000\002\005\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\005\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\004\004\001\002\000\006\005\021\006" +
    "\020\001\002\000\004\002\017\001\002\000\010\002\ufffe" +
    "\004\004\021\007\001\002\000\004\026\012\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffff\001\002\000\004" +
    "\037\013\001\002\000\004\027\014\001\002\000\004\036" +
    "\015\001\002\000\006\002\ufffa\021\007\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\000\001\002\000\004\032" +
    "\115\001\002\000\004\032\022\001\002\000\014\007\025" +
    "\010\027\011\026\014\023\033\024\001\002\000\004\035" +
    "\100\001\002\000\010\002\ufff5\004\ufff5\021\ufff5\001\002" +
    "\000\004\035\074\001\002\000\004\035\042\001\002\000" +
    "\004\035\031\001\002\000\010\002\ufffd\004\ufffd\021\ufffd" +
    "\001\002\000\004\030\032\001\002\000\004\037\033\001" +
    "\002\000\006\031\040\034\037\001\002\000\004\036\035" +
    "\001\002\000\014\007\025\010\027\011\026\014\023\033" +
    "\024\001\002\000\010\002\ufff8\004\ufff8\021\ufff8\001\002" +
    "\000\004\037\033\001\002\000\004\036\ufff1\001\002\000" +
    "\004\036\ufff2\001\002\000\004\030\043\001\002\000\012" +
    "\003\044\026\052\040\050\041\053\001\002\000\012\003" +
    "\044\026\052\040\050\041\053\001\002\000\004\036\071" +
    "\001\002\000\024\022\uffe4\023\uffe4\024\061\025\062\027" +
    "\uffe4\031\uffe4\033\uffe4\034\uffe4\036\uffe4\001\002\000\024" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\031\uffe1\033" +
    "\uffe1\034\uffe1\036\uffe1\001\002\000\024\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\031\uffe0\033\uffe0\034\uffe0\036" +
    "\uffe0\001\002\000\012\022\055\023\056\031\067\034\066" +
    "\001\002\000\012\003\044\026\052\040\050\041\053\001" +
    "\002\000\024\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf" +
    "\031\uffdf\033\uffdf\034\uffdf\036\uffdf\001\002\000\010\022" +
    "\055\023\056\027\057\001\002\000\012\003\044\026\052" +
    "\040\050\041\053\001\002\000\012\003\044\026\052\040" +
    "\050\041\053\001\002\000\024\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\027\uffde\031\uffde\033\uffde\034\uffde\036\uffde\001" +
    "\002\000\024\022\uffe5\023\uffe5\024\061\025\062\027\uffe5" +
    "\031\uffe5\033\uffe5\034\uffe5\036\uffe5\001\002\000\012\003" +
    "\044\026\052\040\050\041\053\001\002\000\012\003\044" +
    "\026\052\040\050\041\053\001\002\000\024\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\027\uffe2\031\uffe2\033\uffe2\034\uffe2" +
    "\036\uffe2\001\002\000\024\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\027\uffe3\031\uffe3\033\uffe3\034\uffe3\036\uffe3\001\002" +
    "\000\024\022\uffe6\023\uffe6\024\061\025\062\027\uffe6\031" +
    "\uffe6\033\uffe6\034\uffe6\036\uffe6\001\002\000\012\003\044" +
    "\026\052\040\050\041\053\001\002\000\004\036\ufff3\001" +
    "\002\000\004\036\ufff4\001\002\000\014\007\025\010\027" +
    "\011\026\014\023\033\024\001\002\000\010\002\ufff7\004" +
    "\ufff7\021\ufff7\001\002\000\024\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\027\uffdd\031\uffdd\033\uffdd\034\uffdd\036\uffdd\001" +
    "\002\000\004\037\075\001\002\000\004\036\076\001\002" +
    "\000\014\007\025\010\027\011\026\014\023\033\024\001" +
    "\002\000\010\002\ufff9\004\ufff9\021\ufff9\001\002\000\004" +
    "\030\101\001\002\000\004\032\103\001\002\000\004\036" +
    "\113\001\002\000\012\003\044\026\052\040\050\041\053" +
    "\001\002\000\010\022\055\023\056\034\105\001\002\000" +
    "\012\003\044\026\052\040\050\041\053\001\002\000\010" +
    "\022\055\023\056\033\107\001\002\000\006\031\111\034" +
    "\110\001\002\000\004\032\103\001\002\000\004\036\uffef" +
    "\001\002\000\004\036\ufff0\001\002\000\014\007\025\010" +
    "\027\011\026\014\023\033\024\001\002\000\010\002\ufff6" +
    "\004\ufff6\021\ufff6\001\002\000\022\007\116\012\121\013" +
    "\125\014\123\015\122\017\117\020\126\033\124\001\002" +
    "\000\004\035\162\001\002\000\004\035\156\001\002\000" +
    "\010\002\ufffc\004\ufffc\021\ufffc\001\002\000\004\035\151" +
    "\001\002\000\004\035\145\001\002\000\004\035\140\001" +
    "\002\000\010\002\uffe7\004\uffe7\021\uffe7\001\002\000\004" +
    "\035\133\001\002\000\004\035\127\001\002\000\004\037" +
    "\130\001\002\000\004\036\131\001\002\000\022\007\116" +
    "\012\121\013\125\014\123\015\122\017\117\020\126\033" +
    "\124\001\002\000\010\002\uffe8\004\uffe8\021\uffe8\001\002" +
    "\000\004\030\134\001\002\000\012\003\044\026\052\040" +
    "\050\041\053\001\002\000\004\036\136\001\002\000\022" +
    "\007\116\012\121\013\125\014\123\015\122\017\117\020" +
    "\126\033\124\001\002\000\010\002\uffeb\004\uffeb\021\uffeb" +
    "\001\002\000\004\030\141\001\002\000\004\032\103\001" +
    "\002\000\004\036\143\001\002\000\022\007\116\012\121" +
    "\013\125\014\123\015\122\017\117\020\126\033\124\001" +
    "\002\000\010\002\uffe9\004\uffe9\021\uffe9\001\002\000\004" +
    "\016\146\001\002\000\004\036\147\001\002\000\022\007" +
    "\116\012\121\013\125\014\123\015\122\017\117\020\126" +
    "\033\124\001\002\000\010\002\uffed\004\uffed\021\uffed\001" +
    "\002\000\004\030\152\001\002\000\004\037\033\001\002" +
    "\000\004\036\154\001\002\000\022\007\116\012\121\013" +
    "\125\014\123\015\122\017\117\020\126\033\124\001\002" +
    "\000\010\002\uffec\004\uffec\021\uffec\001\002\000\012\003" +
    "\044\026\052\040\050\041\053\001\002\000\010\022\055" +
    "\023\056\036\160\001\002\000\022\007\116\012\121\013" +
    "\125\014\123\015\122\017\117\020\126\033\124\001\002" +
    "\000\010\002\uffea\004\uffea\021\uffea\001\002\000\004\037" +
    "\163\001\002\000\004\036\164\001\002\000\022\007\116" +
    "\012\121\013\125\014\123\015\122\017\117\020\126\033" +
    "\124\001\002\000\010\002\uffee\004\uffee\021\uffee\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\007\003\005\004\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\035\001\001\000\002" +
    "\001\001\000\004\010\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\044\012\050" +
    "\013\045\014\046\001\001\000\004\014\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\053\013\045\014" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\064\014\046\001\001\000\006\013\057\014\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\063" +
    "\001\001\000\004\014\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\067\012\050" +
    "\013\045\014\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\101\001\001\000\002\001\001\000\010\012\103\013" +
    "\045\014\046\001\001\000\002\001\001\000\010\012\105" +
    "\013\045\014\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\113\001\001\000\002\001\001\000" +
    "\004\005\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\134\012\050\013\045\014\046\001\001\000\002\001" +
    "\001\000\004\005\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\141\001\001\000\002\001\001\000" +
    "\004\005\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\152\001\001\000\002" +
    "\001\001\000\004\005\154\001\001\000\002\001\001\000" +
    "\010\012\156\013\045\014\046\001\001\000\002\001\001" +
    "\000\004\005\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\164\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserGraphics$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserGraphics$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserGraphics$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexer.next_token(); 
    }


    // Connect this parser to a scanner!
    private Lexer lexer;
    
    public ParserGraphics (Lexer lexer){ 
        super(lexer);
        this.lexer=lexer;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + ParserGraphicsSym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserGraphicsSym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserGraphics$actions {
  private final ParserGraphics parser;

  /** Constructor */
  CUP$ParserGraphics$actions(ParserGraphics parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserGraphics$do_action_part00000000(
    int                        CUP$ParserGraphics$act_num,
    java_cup.runtime.lr_parser CUP$ParserGraphics$parser,
    java.util.Stack            CUP$ParserGraphics$stack,
    int                        CUP$ParserGraphics$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserGraphics$result;

      /* select the action based on the action number */
      switch (CUP$ParserGraphics$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= graps s 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		RESULT = start_val;
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserGraphics$parser.done_parsing();
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= graps ej 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= graps 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // graps ::= DEF GRAPHICBARRA LLA_A contBarra 
            {
              Object RESULT =null;
		
                                                    System.out.println("Grafica de barra");
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("graps",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // graps ::= DEF GRAPHICPIE LLA_A contPie 
            {
              Object RESULT =null;
		
                                                    System.out.println("Grafica de pie");
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("graps",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ej ::= EXECUTE PA_A STRING PA_C PUNTOCOMA ej 
            {
              Object RESULT =null;
		
                                                    System.out.println("Instruccion de ejecucion");
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ej",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ej ::= EXECUTE PA_A STRING PA_C PUNTOCOMA 
            {
              Object RESULT =null;
		
                                                    System.out.println("Instruccion de ejecucion");
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ej",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contBarra ::= TITTLE DOSPUNTOS STRING PUNTOCOMA contBarra 
            {
              GraficaBarra RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		
                                                                        //String tittle = (String)((Token)titulo).getValue();
                                                                        //System.out.println("Titulo de grafico: "+tittle);
                                                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contBarra ::= EJEX DOSPUNTOS CO_A contEjeX PUNTOCOMA contBarra 
            {
              GraficaBarra RESULT =null;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		
                                                                            if(pila!=null){
                                                                                //System.out.println("Datos del eje x");
                                                                                //pila.imprimirPila();
                                                                            }
                                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contBarra ::= EJEY DOSPUNTOS CO_A contEjeY PUNTOCOMA contBarra 
            {
              GraficaBarra RESULT =null;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		
                                                                            if(pila!=null){
                                                                                //System.out.println("Datos del eje y");
                                                                                //pila.imprimirPila();
                                                                            }
                                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contBarra ::= LINK DOSPUNTOS CO_A contUnir PUNTOCOMA contBarra 
            {
              GraficaBarra RESULT =null;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		
                                                                            if(pila!=null){
                                                                                //System.out.println("Datos de union");
                                                                                //pila.imprimirPila();
                                                                            }
                                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contBarra ::= LLA_C 
            {
              GraficaBarra RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contEjeY ::= e COMA contEjeY 
            {
              Pila<Double> RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                RESULT = pila;
                                                if(RESULT != null){
                                                    RESULT.push(num1);
                                                }
                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeY",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contEjeY ::= e CO_C 
            {
              Pila<Double> RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                RESULT = new Pila<>();
                                RESULT.push(num1);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeY",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contEjeX ::= STRING COMA contEjeX 
            {
              Pila<String> RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                        RESULT = pila;
                                                        if(RESULT!=null){
                                                            String strin = (String)((Token)cadena).getValue();
                                                            RESULT.push(strin);                    
                                                        }
                                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeX",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // contEjeX ::= STRING CO_C 
            {
              Pila<String> RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                        RESULT = new Pila<>();
                                        String strin = (String)((Token)cadena).getValue();
                                        RESULT.push(strin);
                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeX",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contUnir ::= LLA_A e COMA e LLA_C COMA contUnir 
            {
              Pila<Union> RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                                        RESULT = pila;
                                                                        if(RESULT!=null){
                                                                            RESULT.push(new Union(num1.intValue(),num2.intValue()));    
                                                                        }
                                                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contUnir",7, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-6)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contUnir ::= LLA_A e COMA e LLA_C CO_C 
            {
              Pila<Union> RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		
                                                                        RESULT = new Pila<>();
                                                                        RESULT.push(new Union(num1.intValue(),num2.intValue()));
                                                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contUnir",7, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contPie ::= TITTLE DOSPUNTOS STRING PUNTOCOMA contPie 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contPie ::= TYPE DOSPUNTOS TYPEVALUE PUNTOCOMA contPie 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contPie ::= LABEL DOSPUNTOS CO_A contEjeX PUNTOCOMA contPie 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // contPie ::= VALUES DOSPUNTOS CO_A contEjeY PUNTOCOMA contPie 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // contPie ::= TOTAL DOSPUNTOS e PUNTOCOMA contPie 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contPie ::= LINK DOSPUNTOS CO_A contUnir PUNTOCOMA contPie 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contPie ::= EXTRA DOSPUNTOS STRING PUNTOCOMA contPie 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contPie ::= LLA_C 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // e ::= e MAS t 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1 + num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // e ::= e MENOS t 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1 - num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // e ::= t 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = exp;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // t ::= t MUL f 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1*num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",9, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // t ::= t DIV f 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = (num1/num2);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",9, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // t ::= f 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = exp;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",9, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // f ::= NUMBERS 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                            RESULT = (Double) ((Token)num).getValue();
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",10, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // f ::= DECIMAL 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                            RESULT = (Double) ((Token)num).getValue();
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",10, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // f ::= PA_A e PA_C 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                            RESULT = exp;
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",10, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // f ::= error f 
            {
              Double RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",10, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserGraphics$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserGraphics$do_action(
    int                        CUP$ParserGraphics$act_num,
    java_cup.runtime.lr_parser CUP$ParserGraphics$parser,
    java.util.Stack            CUP$ParserGraphics$stack,
    int                        CUP$ParserGraphics$top)
    throws java.lang.Exception
    {
              return CUP$ParserGraphics$do_action_part00000000(
                               CUP$ParserGraphics$act_num,
                               CUP$ParserGraphics$parser,
                               CUP$ParserGraphics$stack,
                               CUP$ParserGraphics$top);
    }
}

}
