
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.carlos.android_practica1.backened.lexerParser;

import java.util.ArrayList;
import java.util.Stack;

import com.carlos.android_practica1.backened.obj.ErrorAnalisis;
import com.carlos.android_practica1.backened.ED.Pila;
import com.carlos.android_practica1.backened.obj.Token;
import com.carlos.android_practica1.backened.obj.Union;
import com.carlos.android_practica1.backened.obj.OcurrenciaOperador;
import com.carlos.android_practica1.backened.obj.Grafica;
import com.carlos.android_practica1.backened.obj.GraficaBarra;
import com.carlos.android_practica1.backened.obj.GraficaPie;
import com.carlos.android_practica1.backened.obj.VerficacionValuesPie;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class ParserGraphics extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return ParserGraphicsSym.class;
    }

    /** Default constructor. */
    @Deprecated
    public ParserGraphics() {super();}

    /** Constructor which sets the default scanner. */
    @Deprecated
    public ParserGraphics(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public ParserGraphics(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\062\000\002\002\007\000\002\002\004\000\002\002" +
                            "\007\000\002\002\010\000\002\002\006\000\002\002\006" +
                            "\000\002\004\007\000\002\004\010\000\002\004\010\000" +
                            "\002\004\010\000\002\004\003\000\002\004\004\000\002" +
                            "\004\004\000\002\003\007\000\002\003\007\000\002\003" +
                            "\010\000\002\003\010\000\002\003\007\000\002\003\010" +
                            "\000\002\003\007\000\002\003\003\000\002\003\004\000" +
                            "\002\003\004\000\002\010\005\000\002\010\005\000\002" +
                            "\010\003\000\002\010\003\000\002\012\005\000\002\012" +
                            "\005\000\002\012\003\000\002\013\003\000\002\013\003" +
                            "\000\002\013\005\000\002\013\004\000\002\005\005\000" +
                            "\002\005\004\000\002\006\005\000\002\006\004\000\002" +
                            "\007\011\000\002\007\010\000\002\011\005\000\002\011" +
                            "\005\000\002\011\003\000\002\011\003\000\002\014\005" +
                            "\000\002\014\005\000\002\014\003\000\002\015\003\000" +
                            "\002\015\005\000\002\015\004" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\203\000\004\004\004\001\002\000\006\005\201\006" +
                            "\200\001\002\000\010\002\010\004\007\021\006\001\002" +
                            "\000\004\026\174\001\002\000\006\005\012\006\011\001" +
                            "\002\000\004\002\000\001\002\000\006\003\127\032\130" +
                            "\001\002\000\006\003\013\032\014\001\002\000\004\036" +
                            "\126\001\002\000\016\003\ufff7\007\ufff7\010\ufff7\011\ufff7" +
                            "\014\ufff7\033\ufff7\001\002\000\016\003\020\007\021\010" +
                            "\023\011\022\014\016\033\017\001\002\000\004\035\071" +
                            "\001\002\000\010\002\001\004\001\021\001\001\002\000" +
                            "\016\003\ufff6\007\ufff6\010\ufff6\011\ufff6\014\ufff6\033\ufff6" +
                            "\001\002\000\004\035\066\001\002\000\004\035\034\001" +
                            "\002\000\004\035\024\001\002\000\004\030\025\001\002" +
                            "\000\004\037\026\001\002\000\006\031\032\034\031\001" +
                            "\002\000\004\036\030\001\002\000\016\003\ufffa\007\ufffa" +
                            "\010\ufffa\011\ufffa\014\ufffa\033\ufffa\001\002\000\004\037" +
                            "\026\001\002\000\004\036\uffdc\001\002\000\004\036\uffdd" +
                            "\001\002\000\004\030\035\001\002\000\012\003\036\026" +
                            "\044\040\042\041\045\001\002\000\026\003\052\022\uffe7" +
                            "\023\uffe7\026\044\027\uffe7\031\uffe7\034\uffe7\036\uffe7\040" +
                            "\042\041\045\001\002\000\022\022\uffe8\023\uffe8\024\054" +
                            "\025\055\027\uffe8\031\uffe8\034\uffe8\036\uffe8\001\002\000" +
                            "\004\036\065\001\002\000\022\022\uffe4\023\uffe4\024\uffe4" +
                            "\025\uffe4\027\uffe4\031\uffe4\034\uffe4\036\uffe4\001\002\000" +
                            "\024\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\031\uffe3" +
                            "\033\uffe3\034\uffe3\036\uffe3\001\002\000\012\022\047\023" +
                            "\050\031\063\034\062\001\002\000\012\003\036\026\044" +
                            "\040\042\041\045\001\002\000\024\022\uffe2\023\uffe2\024" +
                            "\uffe2\025\uffe2\027\uffe2\031\uffe2\033\uffe2\034\uffe2\036\uffe2" +
                            "\001\002\000\010\022\047\023\050\027\051\001\002\000" +
                            "\012\003\052\026\044\040\042\041\045\001\002\000\012" +
                            "\003\052\026\044\040\042\041\045\001\002\000\024\022" +
                            "\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\031\uffe1\033\uffe1" +
                            "\034\uffe1\036\uffe1\001\002\000\012\003\052\026\044\040" +
                            "\042\041\045\001\002\000\022\022\uffe9\023\uffe9\024\054" +
                            "\025\055\027\uffe9\031\uffe9\034\uffe9\036\uffe9\001\002\000" +
                            "\012\003\052\026\044\040\042\041\045\001\002\000\012" +
                            "\003\052\026\044\040\042\041\045\001\002\000\022\022" +
                            "\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5\031\uffe5\034\uffe5" +
                            "\036\uffe5\001\002\000\022\022\uffe6\023\uffe6\024\uffe6\025" +
                            "\uffe6\027\uffe6\031\uffe6\034\uffe6\036\uffe6\001\002\000\024" +
                            "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\031\uffe0\033" +
                            "\uffe0\034\uffe0\036\uffe0\001\002\000\022\022\uffea\023\uffea" +
                            "\024\054\025\055\027\uffea\031\uffea\034\uffea\036\uffea\001" +
                            "\002\000\012\003\036\026\044\040\042\041\045\001\002" +
                            "\000\004\036\uffde\001\002\000\004\036\uffdf\001\002\000" +
                            "\016\003\ufff9\007\ufff9\010\ufff9\011\ufff9\014\ufff9\033\ufff9" +
                            "\001\002\000\004\037\067\001\002\000\004\036\070\001" +
                            "\002\000\016\003\ufffb\007\ufffb\010\ufffb\011\ufffb\014\ufffb" +
                            "\033\ufffb\001\002\000\004\030\072\001\002\000\004\032" +
                            "\074\001\002\000\004\036\125\001\002\000\010\003\077" +
                            "\026\102\040\100\001\002\000\010\022\114\023\115\034" +
                            "\113\001\002\000\016\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
                            "\033\uffd3\034\uffd3\001\002\000\022\003\052\022\uffd6\023" +
                            "\uffd6\026\044\033\uffd6\034\uffd6\040\042\041\045\001\002" +
                            "\000\016\022\uffd2\023\uffd2\024\uffd2\025\uffd2\033\uffd2\034" +
                            "\uffd2\001\002\000\016\022\uffd7\023\uffd7\024\105\025\106" +
                            "\033\uffd7\034\uffd7\001\002\000\012\003\036\026\044\040" +
                            "\042\041\045\001\002\000\010\022\047\023\050\027\104" +
                            "\001\002\000\016\022\uffd1\023\uffd1\024\uffd1\025\uffd1\033" +
                            "\uffd1\034\uffd1\001\002\000\010\003\110\026\102\040\100" +
                            "\001\002\000\010\003\110\026\102\040\100\001\002\000" +
                            "\016\022\uffd4\023\uffd4\024\uffd4\025\uffd4\033\uffd4\034\uffd4" +
                            "\001\002\000\012\003\052\026\044\040\042\041\045\001" +
                            "\002\000\016\022\uffd0\023\uffd0\024\uffd0\025\uffd0\033\uffd0" +
                            "\034\uffd0\001\002\000\016\022\uffd5\023\uffd5\024\uffd5\025" +
                            "\uffd5\033\uffd5\034\uffd5\001\002\000\010\003\077\026\102" +
                            "\040\100\001\002\000\010\003\110\026\102\040\100\001" +
                            "\002\000\010\003\110\026\102\040\100\001\002\000\016" +
                            "\022\uffd8\023\uffd8\024\105\025\106\033\uffd8\034\uffd8\001" +
                            "\002\000\016\022\uffd9\023\uffd9\024\105\025\106\033\uffd9" +
                            "\034\uffd9\001\002\000\010\022\114\023\115\033\121\001" +
                            "\002\000\006\031\123\034\122\001\002\000\004\032\074" +
                            "\001\002\000\004\036\uffda\001\002\000\004\036\uffdb\001" +
                            "\002\000\016\003\ufff8\007\ufff8\010\ufff8\011\ufff8\014\ufff8" +
                            "\033\ufff8\001\002\000\016\003\ufff5\007\ufff5\010\ufff5\011" +
                            "\ufff5\014\ufff5\033\ufff5\001\002\000\004\036\173\001\002" +
                            "\000\024\003\uffed\007\uffed\012\uffed\013\uffed\014\uffed\015" +
                            "\uffed\017\uffed\020\uffed\033\uffed\001\002\000\024\003\137" +
                            "\007\132\012\134\013\141\014\136\015\135\017\133\020" +
                            "\142\033\140\001\002\000\004\035\170\001\002\000\004" +
                            "\035\165\001\002\000\004\035\161\001\002\000\004\035" +
                            "\156\001\002\000\004\035\152\001\002\000\024\003\uffec" +
                            "\007\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec\020" +
                            "\uffec\033\uffec\001\002\000\010\002\uffff\004\uffff\021\uffff" +
                            "\001\002\000\004\035\146\001\002\000\004\035\143\001" +
                            "\002\000\004\037\144\001\002\000\004\036\145\001\002" +
                            "\000\024\003\uffee\007\uffee\012\uffee\013\uffee\014\uffee\015" +
                            "\uffee\017\uffee\020\uffee\033\uffee\001\002\000\004\030\147" +
                            "\001\002\000\012\003\036\026\044\040\042\041\045\001" +
                            "\002\000\004\036\151\001\002\000\024\003\ufff1\007\ufff1" +
                            "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1\033" +
                            "\ufff1\001\002\000\004\030\153\001\002\000\004\032\074" +
                            "\001\002\000\004\036\155\001\002\000\024\003\uffef\007" +
                            "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef" +
                            "\033\uffef\001\002\000\004\016\157\001\002\000\004\036" +
                            "\160\001\002\000\024\003\ufff3\007\ufff3\012\ufff3\013\ufff3" +
                            "\014\ufff3\015\ufff3\017\ufff3\020\ufff3\033\ufff3\001\002\000" +
                            "\004\030\162\001\002\000\004\037\026\001\002\000\004" +
                            "\036\164\001\002\000\024\003\ufff2\007\ufff2\012\ufff2\013" +
                            "\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\033\ufff2\001\002" +
                            "\000\012\003\036\026\044\040\042\041\045\001\002\000" +
                            "\010\022\047\023\050\036\167\001\002\000\024\003\ufff0" +
                            "\007\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020" +
                            "\ufff0\033\ufff0\001\002\000\004\037\171\001\002\000\004" +
                            "\036\172\001\002\000\024\003\ufff4\007\ufff4\012\ufff4\013" +
                            "\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4\033\ufff4\001\002" +
                            "\000\024\003\uffeb\007\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
                            "\uffeb\017\uffeb\020\uffeb\033\uffeb\001\002\000\004\037\175" +
                            "\001\002\000\004\027\176\001\002\000\004\036\177\001" +
                            "\002\000\010\002\ufffe\004\ufffe\021\ufffe\001\002\000\006" +
                            "\003\127\032\130\001\002\000\006\003\013\032\014\001" +
                            "\002\000\016\003\020\007\021\010\023\011\022\014\016" +
                            "\033\203\001\002\000\010\002\ufffd\004\ufffd\021\ufffd\001" +
                            "\002\000\024\003\137\007\132\012\134\013\141\014\136" +
                            "\015\135\017\133\020\142\033\205\001\002\000\010\002" +
                            "\ufffc\004\ufffc\021\ufffc\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\203\000\004\002\004\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\003\130\001\001\000\004\004\014\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\006\026\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\006\032\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\012\005\037\010\042\012\036\013\040\001\001\000\004" +
                            "\013\057\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
                            "\010\045\012\036\013\040\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\012\060\013\040\001\001\000\006" +
                            "\012\052\013\040\001\001\000\002\001\001\000\004\013" +
                            "\057\001\001\000\002\001\001\000\004\013\056\001\001" +
                            "\000\004\013\055\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\012\005\063" +
                            "\010\042\012\036\013\040\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
                            "\072\001\001\000\002\001\001\000\010\011\074\014\100" +
                            "\015\075\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\013\110\001\001\000\002\001\001\000\002\001\001" +
                            "\000\010\010\102\012\036\013\040\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\015\111\001\001\000\004" +
                            "\015\106\001\001\000\002\001\001\000\004\013\110\001" +
                            "\001\000\002\001\001\000\002\001\001\000\010\011\117" +
                            "\014\100\015\075\001\001\000\006\014\116\015\075\001" +
                            "\001\000\006\014\115\015\075\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\007\123\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\012\005\147\010\042" +
                            "\012\036\013\040\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\007\153\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\006\162" +
                            "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
                            "\165\012\036\013\040\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\003\203\001" +
                            "\001\000\004\004\201\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$ParserGraphics$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$ParserGraphics$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$ParserGraphics$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 1;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}


    /** Scan to get the next Symbol. */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception
    {
        return this.lexer.next_token();
    }


    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";
    private static final String ERROR_TYPE_EJE = "Ejecucion";
    private static final String ERROR_TYPE_CRE = "Creacion";

    private Lexer lexer;
    private VerficacionValuesPie verficacionValuesPie;
    private SimbolosTerminales simbolosTerminales;
    private ArrayList<OcurrenciaOperador> ocurrencias;
    private ArrayList<Grafica> graficasGeneradas;
    private ArrayList<String> graficasEjecutar;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;


    public ParserGraphics (Lexer lexer){
        super(lexer);
        this.lexer=lexer;
        this.simbolosTerminales = new SimbolosTerminales();
        this.ocurrencias = new ArrayList<>();
        this.graficasGeneradas = new ArrayList<>();
        this.graficasEjecutar = new ArrayList<>();
        this.verficacionValuesPie= new VerficacionValuesPie();
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserGraphicsSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserGraphicsSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            System.out.println(er);
        }
    }

    private void semantic_error(Token token,String contexto) {
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    private boolean definition_error(Token ini,Token fin,ArrayList<String> errores){
        boolean status = false;
        for (String errore : errores) {
            status = true;
            String error = "Error en definicion, "+errore+" Ubicacion general --> Linea: "+ini.getLinea()+" a Linea: "+fin.getLinea();
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, ini.getLexema(), ini.getLinea(), ini.getColumna(), error));
            System.out.println(error);
        }
        return status;
    }

    private void execution_error_grap(Token token,String nameGra){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_EJE, nameGra, token.getLinea(), token.getColumna(), "La grafica que desea ejecutar no existe"));
    }

    private void error_grap_def(Token token,String nameGra){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_CRE, nameGra, token.getLinea(), token.getColumna(), ", Ya existe una grafica con ese titulo asigne uno distinto"));
    }

    private void referencia_numerica_incorrecta(Token token,Double valor){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,valor.toString(), token.getLinea(),(token.getColumna()+1), ", Se espera un valor entero o una operacion con resultado entero"));
    }

    private void referencia_numero_negativo(Token token,Double valor){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM,String.valueOf(valor.intValue()), token.getLinea(),(token.getColumna()+1), ", Se esperaba un valor positivo"));
    }

    private void referencia_numero_negativo_values(Token token,Double valor){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM,valor.toString(), token.getLinea(),(token.getColumna()+1), ", Se esperaba un valor positivo"));
    }

    public ArrayList<OcurrenciaOperador> getOcurrencias() {
        return ocurrencias;
    }

    public ArrayList<Grafica> getGraficasGeneradas() {
        return graficasGeneradas;
    }

    public ArrayList<String> getGraficasEjecutar() {
        return graficasEjecutar;
    }

    private boolean buscarGrafica(String nombre){
        for (Grafica graficasGenerada : this.graficasGeneradas) {
            if(graficasGenerada.getTitulo().equals(nombre)){
                return true;
            }
        }
        return false;
    }

    protected int error_sync_size() {
        return 1;
    }


    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$ParserGraphics$actions {
        private final ParserGraphics parser;

        /** Constructor */
        CUP$ParserGraphics$actions(ParserGraphics parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$ParserGraphics$do_action_part00000000(
                int                        CUP$ParserGraphics$act_num,
                java_cup.runtime.lr_parser CUP$ParserGraphics$parser,
                java.util.Stack            CUP$ParserGraphics$stack,
                int                        CUP$ParserGraphics$top)
                throws java.lang.Exception
        {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$ParserGraphics$result;

            /* select the action based on the action number */
            switch (CUP$ParserGraphics$act_num)
            {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // s ::= s DEF GRAPHICBARRA contBarra LLA_C
                {
                    Object RESULT =null;
                    int inileft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int iniright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Object ini = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int finleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int finright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    Object fin = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    if(gb!=null){
                        System.out.println("Grafica: "+gb.getTitulo());
                        if(buscarGrafica(gb.getTitulo())){
                            System.out.println("La Grafica: "+gb.getTitulo()+", ya existe");
                            error_grap_def((Token) ini, gb.getTitulo());
                        }else{
                            if(!definition_error((Token)ini,(Token)fin,gb.verificarGrafica())){
                                errorAnalisisesTmp = gb.analizarUnir();
                                if(errorAnalisisesTmp.isEmpty()){
                                    gb.triangularUniones();
                                    graficasGeneradas.add(gb);
                                    System.out.println("Grafica Valida");
                                }else{
                                    System.out.println("Grafica No Valida");
                                    for (ErrorAnalisis errorAnalisis : errorAnalisisesTmp) {
                                        lexer.getErrors().push(errorAnalisis);
                                    }
                                }
                            }else{
                                System.out.println("Grafica No Valida");
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // $START ::= s EOF
                {
                    Object RESULT =null;
                    int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int start_valright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    RESULT = start_val;
                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$ParserGraphics$parser.done_parsing();
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // s ::= s DEF GRAPHICPIE contPie LLA_C
                {
                    Object RESULT =null;
                    int inileft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int iniright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Object ini = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int finleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int finright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    Object fin = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    if(gp!=null){
                        System.out.println("Grafica: "+gp.getTitulo());
                        if(buscarGrafica(gp.getTitulo())){
                            System.out.println("La Grafica: "+gp.getTitulo()+", ya existe");
                            error_grap_def((Token) ini, gp.getTitulo());
                        }else{
                            if(!definition_error((Token)ini,(Token)fin,gp.verificarGrafica())){
                                errorAnalisisesTmp = gp.analizarUnir();
                                if(errorAnalisisesTmp.isEmpty()){
                                    gp.triangularUniones();
                                    if(gp.getTipo().equals("Porcentaje")){
                                        String errorVer = verficacionValuesPie.verficarPiePorcentaje(gp);
                                        if(errorVer.isEmpty()){
                                            graficasGeneradas.add(gp);
                                            System.out.println("Grafica Valida");
                                        }else{
                                            System.out.println("Grafica No Valida");
                                            lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, "unir",((Token)ini).getLinea(), ((Token)ini).getColumna(), errorVer));
                                        }
                                    }else{
                                        String errorVer = verficacionValuesPie.verficarPieCantidad(gp);
                                        if(errorVer.isEmpty()){
                                            graficasGeneradas.add(gp);
                                            System.out.println("Grafica Valida");
                                        }else{
                                            System.out.println("Grafica No Valida");
                                            lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, "unir",((Token)ini).getLinea(), ((Token)ini).getColumna(), errorVer));
                                        }
                                    }
                                }else{
                                    System.out.println("Grafica No Valida");
                                    for (ErrorAnalisis errorAnalisis : errorAnalisisesTmp) {
                                        lexer.getErrors().push(errorAnalisis);
                                    }
                                }
                            }else{
                                System.out.println("Grafica No Valida");
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // s ::= s EXECUTE PA_A STRING PA_C PUNTOCOMA
                {
                    Object RESULT =null;
                    int exleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int exright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    Object ex = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int gnleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int gnright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    Object gn = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;

                    System.out.println("Grafico ejecutar: "+(String)((Token)gn).getValue());
                    Token strin = (Token) gn;
                    Token exe = (Token) ex;
                    if(buscarGrafica((String) strin.getValue())){
                        graficasEjecutar.add((String) strin.getValue());
                    }else{
                        System.out.println("---La Grafica no existe");
                        execution_error_grap(exe, (String) strin.getValue());
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // s ::= DEF GRAPHICBARRA contBarra LLA_C
                {
                    Object RESULT =null;
                    int inileft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int iniright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Object ini = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int finleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int finright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    Object fin = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    if(gb!=null){
                        System.out.println("Grafica: "+gb.getTitulo());
                        if(buscarGrafica(gb.getTitulo())){
                            System.out.println("La Grafica: "+gb.getTitulo()+", ya existe");
                            error_grap_def((Token) ini, gb.getTitulo());
                        }else{
                            if(!definition_error((Token)ini,(Token)fin,gb.verificarGrafica())){
                                errorAnalisisesTmp = gb.analizarUnir();
                                if(errorAnalisisesTmp.isEmpty()){
                                    gb.triangularUniones();
                                    graficasGeneradas.add(gb);
                                    System.out.println("Grafica Valida");
                                }else{
                                    System.out.println("Grafica No Valida");
                                    for (ErrorAnalisis errorAnalisis : errorAnalisisesTmp) {
                                        lexer.getErrors().push(errorAnalisis);
                                    }
                                }
                            }else{
                                System.out.println("Grafica No Valida");
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // s ::= DEF GRAPHICPIE contPie LLA_C
                {
                    Object RESULT =null;
                    int inileft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int iniright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Object ini = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int finleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int finright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    Object fin = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    if(gp!=null){
                        System.out.println("Grafica: "+gp.getTitulo());
                        if(buscarGrafica(gp.getTitulo())){
                            System.out.println("La Grafica: "+gp.getTitulo()+", ya existe");
                            error_grap_def((Token) ini, gp.getTitulo());
                        }else{
                            if(!definition_error((Token)ini,(Token)fin,gp.verificarGrafica())){
                                errorAnalisisesTmp = gp.analizarUnir();
                                if(errorAnalisisesTmp.isEmpty()){
                                    gp.triangularUniones();
                                    if(gp.getTipo().equals("Porcentaje")){
                                        String errorVer = verficacionValuesPie.verficarPiePorcentaje(gp);
                                        if(errorVer.isEmpty()){
                                            graficasGeneradas.add(gp);
                                            System.out.println("Grafica Valida");
                                        }else{
                                            System.out.println("Grafica No Valida");
                                            lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, "unir",((Token)ini).getLinea(), ((Token)ini).getColumna(), errorVer));
                                        }
                                    }else{
                                        String errorVer = verficacionValuesPie.verficarPieCantidad(gp);
                                        if(errorVer.isEmpty()){
                                            graficasGeneradas.add(gp);
                                            System.out.println("Grafica Valida");
                                        }else{
                                            System.out.println("Grafica No Valida");
                                            lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, "unir",((Token)ini).getLinea(), ((Token)ini).getColumna(), errorVer));
                                        }
                                    }
                                }else{
                                    System.out.println("Grafica No Valida");
                                    for (ErrorAnalisis errorAnalisis : errorAnalisisesTmp) {
                                        lexer.getErrors().push(errorAnalisis);
                                    }
                                }
                            }else{
                                System.out.println("Grafica No Valida");
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // contBarra ::= contBarra TITTLE DOSPUNTOS STRING PUNTOCOMA
                {
                    GraficaBarra RESULT =null;
                    int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int tituloleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int tituloright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object titulo = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    if(gb !=null){
                        RESULT = gb;
                        if(RESULT.getTitulo()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            String tittle = (String)((Token)titulo).getValue();
                            RESULT.setTitulo(tittle);
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // contBarra ::= contBarra EJEX DOSPUNTOS CO_A contEjeX PUNTOCOMA
                {
                    GraficaBarra RESULT =null;
                    int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
                    int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
                    GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    if(gb !=null){
                        RESULT = gb;
                        if(RESULT.getEjex()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            if(pila!=null){
                                RESULT.setEjex(pila.toArray(String[].class));
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // contBarra ::= contBarra EJEY DOSPUNTOS CO_A contEjeY PUNTOCOMA
                {
                    GraficaBarra RESULT =null;
                    int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
                    int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
                    GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    if(gb !=null){
                        RESULT = gb;
                        if(RESULT.getEjey()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            if(pila!=null){
                                RESULT.setEjey(pila.toArray(Double[].class));
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // contBarra ::= contBarra LINK DOSPUNTOS CO_A contUnir PUNTOCOMA
                {
                    GraficaBarra RESULT =null;
                    int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
                    int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
                    GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;


                    if(gb !=null){
                        RESULT = gb;
                        if(RESULT.getUnir()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            if(pila!=null){
                                RESULT.setUnir(pila.toArrayList());
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // contBarra ::= LLA_A
                {
                    GraficaBarra RESULT =null;

                    RESULT = new GraficaBarra();

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // contBarra ::= contBarra error
                {
                    GraficaBarra RESULT =null;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // contBarra ::= error PUNTOCOMA
                {
                    GraficaBarra RESULT =null;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // contPie ::= contPie TITTLE DOSPUNTOS STRING PUNTOCOMA
                {
                    GraficaPie RESULT =null;
                    int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int tituloleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int tituloright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object titulo = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    if(gp!=null){
                        RESULT = gp;
                        if(RESULT.getTitulo()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            RESULT.setTitulo((String)((Token)titulo).getValue());
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // contPie ::= contPie TYPE DOSPUNTOS TYPEVALUE PUNTOCOMA
                {
                    GraficaPie RESULT =null;
                    int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int tiporight = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    if(gp!=null){
                        RESULT = gp;
                        if(RESULT.getTipo()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            RESULT.setTipo((String)((Token)tipo).getValue());
                        }

                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // contPie ::= contPie LABEL DOSPUNTOS CO_A contEjeX PUNTOCOMA
                {
                    GraficaPie RESULT =null;
                    int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
                    int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
                    GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;


                    if(gp!=null){
                        RESULT = gp;
                        if(RESULT.getEtiquetas()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            if(pila!=null){
                                RESULT.setEtiquetas(pila.toArray(String[].class));
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // contPie ::= contPie VALUES DOSPUNTOS CO_A contEjeY PUNTOCOMA
                {
                    GraficaPie RESULT =null;
                    int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
                    int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
                    GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;


                    if(gp!=null){
                        RESULT = gp;
                        if(RESULT.getValores()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            if(pila!=null){
                                RESULT.setValores(pila.toArray(Double[].class));
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // contPie ::= contPie TOTAL DOSPUNTOS e PUNTOCOMA
                {
                    GraficaPie RESULT =null;
                    int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Double num = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    if(gp!=null){
                        RESULT = gp;
                        if(RESULT.getTotal()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            if(num!=null){
                                RESULT.setTotal(num);
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // contPie ::= contPie LINK DOSPUNTOS CO_A contUnir PUNTOCOMA
                {
                    GraficaPie RESULT =null;
                    int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
                    int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
                    GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;


                    if(gp!=null){
                        RESULT = gp;
                        if(RESULT.getUnir()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            if(pila!=null){
                                RESULT.setUnir(pila.toArrayList());
                            }
                        }
                    }


                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // contPie ::= contPie EXTRA DOSPUNTOS STRING PUNTOCOMA
                {
                    GraficaPie RESULT =null;
                    int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int extraleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int extraright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object extra = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    if(gp!=null){
                        RESULT = gp;
                        if(RESULT.getExtra()!=null){
                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                        }else{
                            RESULT.setExtra((String)((Token)extra).getValue());
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // contPie ::= LLA_A
                {
                    GraficaPie RESULT =null;

                    RESULT = new GraficaPie();

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // contPie ::= contPie error
                {
                    GraficaPie RESULT =null;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // contPie ::= error PUNTOCOMA
                {
                    GraficaPie RESULT =null;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // e ::= e MAS t
                {
                    Double RESULT =null;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token operador = (Token) s;
                    if(num2!=null&&num1!=null){
                        String ocu = operador.getAntToken().getLexema() + " + " +num2.getToken().getLexema();
                        ocurrencias.add(new OcurrenciaOperador("MAS",operador.getLinea(),operador.getColumna(),ocu));
                        RESULT = num1+num2.getValue();
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // e ::= e MENOS t
                {
                    Double RESULT =null;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token operador = (Token) s;
                    if(num2!=null&&num1!=null){
                        String ocu = operador.getAntToken().getLexema() + " - " +num2.getToken().getLexema();
                        ocurrencias.add(new OcurrenciaOperador("MENOS",operador.getLinea(),operador.getColumna(),ocu));
                        RESULT = num1-num2.getValue();
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // e ::= t
                {
                    Double RESULT =null;
                    int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion exp = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    if(exp!=null){
                        RESULT = exp.getValue();
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // e ::= error
                {
                    Double RESULT =null;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // t ::= t MUL f
                {
                    InicioOperacion RESULT =null;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    InicioOperacion num1 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token operador = (Token) s;
                    if(num1!=null&&num2!=null){
                        num2.setValue(num1.getValue()*num2.getValue());
                        String ocu = operador.getAntToken().getLexema() + " * " +num2.getToken().getLexema();
                        ocurrencias.add(new OcurrenciaOperador("Multiplicación",operador.getLinea(),operador.getColumna(),ocu));
                    }
                    RESULT = num2;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // t ::= t DIV f
                {
                    InicioOperacion RESULT =null;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    InicioOperacion num1 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token operador = (Token) s;
                    if(num1!=null&&num2!=null){
                        num2.setValue(num1.getValue()/num2.getValue());
                        String ocu = operador.getAntToken().getLexema() + " / " +num2.getToken().getLexema();
                        ocurrencias.add(new OcurrenciaOperador("División",operador.getLinea(),operador.getColumna(),ocu));
                    }
                    RESULT = num2;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // t ::= f
                {
                    InicioOperacion RESULT =null;
                    int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion exp = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    RESULT = exp;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // f ::= NUMBERS
                {
                    InicioOperacion RESULT =null;
                    int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token tmp = (Token) num;
                    RESULT = new InicioOperacion((Double) tmp.getValue(),tmp);

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // f ::= DECIMAL
                {
                    InicioOperacion RESULT =null;
                    int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token tmp = (Token) num;
                    RESULT = new InicioOperacion((Double) tmp.getValue(),tmp);

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // f ::= PA_A e PA_C
                {
                    InicioOperacion RESULT =null;
                    int inileft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int iniright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    Object ini = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    RESULT = new InicioOperacion(exp,(Token)ini);

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // f ::= error f
                {
                    InicioOperacion RESULT =null;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",9, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // contEjeY ::= e COMA contEjeY
                {
                    Pila<Double> RESULT =null;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    RESULT = pila;
                    if(RESULT != null){
                        RESULT.push(num1);
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeY",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // contEjeY ::= e CO_C
                {
                    Pila<Double> RESULT =null;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    RESULT = new Pila<>();
                    RESULT.push(num1);

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeY",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // contEjeX ::= STRING COMA contEjeX
                {
                    Pila<String> RESULT =null;
                    int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    RESULT = pila;
                    if(RESULT!=null){
                        String strin = (String)((Token)cadena).getValue();
                        RESULT.push(strin);
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeX",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // contEjeX ::= STRING CO_C
                {
                    Pila<String> RESULT =null;
                    int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    RESULT = new Pila<>();
                    String strin = (String)((Token)cadena).getValue();
                    RESULT.push(strin);

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeX",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // contUnir ::= LLA_A ee COMA ee LLA_C COMA contUnir
                {
                    Pila<Union> RESULT =null;
                    int ref1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-6)).left;
                    int ref1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-6)).right;
                    Object ref1 = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-6)).value;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
                    Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
                    int ref2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int ref2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    Object ref2 = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    RESULT = pila;
                    if(RESULT!=null){
                        if(num1!=null && num2!=null){
                            if(num1>=0 && num2>=0){
                                Double mod1 = num1 % 2;
                                Double mod2 = num2 % 2;
                                if((mod1==1||mod1==0)&&(mod2==1||mod2==0)){
                                    System.out.println("Los dos datos son enteros");
                                    Token tok = (Token)ref1;
                                    RESULT.push(new Union(num1.intValue(),num2.intValue(),tok.getLinea(),tok.getColumna()));
                                }else{
                                    if(!(mod1==1||mod1==0)){
                                        referencia_numerica_incorrecta((Token) ref1, num1);
                                    }
                                    if(!(mod2==1||mod2==0)){
                                        referencia_numerica_incorrecta((Token) ref2, num2);
                                    }
                                }
                            }else{
                                if(num1<0){
                                    referencia_numero_negativo((Token) ref1, num1);
                                }
                                if(num2<0){
                                    referencia_numero_negativo((Token) ref2, num2);
                                }
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contUnir",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-6)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // contUnir ::= LLA_A ee COMA ee LLA_C CO_C
                {
                    Pila<Union> RESULT =null;
                    int ref1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
                    int ref1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
                    Object ref1 = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
                    Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
                    int ref2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
                    int ref2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
                    Object ref2 = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
                    int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;

                    if(num1!=null && num2!=null){
                        if(num1>=0 && num2>=0){
                            RESULT = new Pila<>();
                            Double mod1 = num1 % 2;
                            Double mod2 = num2 % 2;

                            if((mod1==1||mod1==0)&&(mod2==1||mod2==0)){
                                System.out.println("Los dos datos son enteros");
                                Token tok = (Token)ref1;
                                RESULT.push(new Union(num1.intValue(),num2.intValue(),tok.getLinea(),tok.getColumna()));
                            }else{
                                if(!(mod1==1||mod1==0)){
                                    referencia_numerica_incorrecta((Token) ref1, num1);
                                }
                                if(!(mod2==1||mod2==0)){
                                    referencia_numerica_incorrecta((Token) ref2, num2);
                                }
                            }
                        }else{
                            if(num1<0){
                                referencia_numero_negativo((Token) ref1, num1);
                            }
                            if(num2<0){
                                referencia_numero_negativo((Token) ref2, num2);
                            }
                        }
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contUnir",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // ee ::= ee MAS te
                {
                    Double RESULT =null;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token operador = (Token) s;
                    if(num2!=null&&num1!=null){
                        String ocu = operador.getAntToken().getLexema() + " + " +num2.getToken().getLexema();
                        ocurrencias.add(new OcurrenciaOperador("MAS",operador.getLinea(),operador.getColumna(),ocu));
                        RESULT = num1+num2.getValue();
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ee",7, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // ee ::= ee MENOS te
                {
                    Double RESULT =null;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token operador = (Token) s;
                    if(num2!=null&&num1!=null){
                        String ocu = operador.getAntToken().getLexema() + " - " +num2.getToken().getLexema();
                        ocurrencias.add(new OcurrenciaOperador("MENOS",operador.getLinea(),operador.getColumna(),ocu));
                        RESULT = num1-num2.getValue();
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ee",7, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // ee ::= te
                {
                    Double RESULT =null;
                    int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion exp = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    if(exp!=null){
                        RESULT = exp.getValue();
                    }

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ee",7, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // ee ::= error
                {
                    Double RESULT =null;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ee",7, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // te ::= te MUL fe
                {
                    InicioOperacion RESULT =null;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    InicioOperacion num1 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token operador = (Token) s;
                    if(num1!=null&&num2!=null){
                        num2.setValue(num1.getValue()*num2.getValue());
                        String ocu = operador.getAntToken().getLexema() + " * " +num2.getToken().getLexema();
                        ocurrencias.add(new OcurrenciaOperador("Multiplicación",operador.getLinea(),operador.getColumna(),ocu));
                    }
                    RESULT = num2;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("te",10, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // te ::= te DIV fe
                {
                    InicioOperacion RESULT =null;
                    int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    InicioOperacion num1 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
                    int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token operador = (Token) s;
                    if(num1!=null&&num2!=null){
                        num2.setValue(num1.getValue()/num2.getValue());
                        String ocu = operador.getAntToken().getLexema() + " / " +num2.getToken().getLexema();
                        ocurrencias.add(new OcurrenciaOperador("División",operador.getLinea(),operador.getColumna(),ocu));
                    }
                    RESULT = num2;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("te",10, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // te ::= fe
                {
                    InicioOperacion RESULT =null;
                    int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    InicioOperacion exp = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    RESULT = exp;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("te",10, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // fe ::= NUMBERS
                {
                    InicioOperacion RESULT =null;
                    int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
                    int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
                    Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;

                    Token tmp = (Token) num;
                    RESULT = new InicioOperacion((Double) tmp.getValue(),tmp);

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("fe",11, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // fe ::= PA_A e PA_C
                {
                    InicioOperacion RESULT =null;
                    int inileft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
                    int iniright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
                    Object ini = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
                    int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
                    int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
                    Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;

                    RESULT = new InicioOperacion(exp,(Token)ini);

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("fe",11, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // fe ::= error f
                {
                    InicioOperacion RESULT =null;

                    CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("fe",11, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
                }
                return CUP$ParserGraphics$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number "+CUP$ParserGraphics$act_num+"found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$ParserGraphics$do_action(
                int                        CUP$ParserGraphics$act_num,
                java_cup.runtime.lr_parser CUP$ParserGraphics$parser,
                java.util.Stack            CUP$ParserGraphics$stack,
                int                        CUP$ParserGraphics$top)
                throws java.lang.Exception
        {
            return CUP$ParserGraphics$do_action_part00000000(
                    CUP$ParserGraphics$act_num,
                    CUP$ParserGraphics$parser,
                    CUP$ParserGraphics$stack,
                    CUP$ParserGraphics$top);
        }
    }

}
