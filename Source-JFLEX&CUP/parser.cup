package com.carlos.pruebas.lexerParser;

import java.util.ArrayList;

import com.carlos.pruebas.obj.ErrorAnalisis;
import com.carlos.pruebas.ED.Pila;
import com.carlos.pruebas.obj.Token;
import com.carlos.pruebas.obj.Union;
import com.carlos.pruebas.obj.OcurrenciaOperador;

import com.carlos.pruebas.obj.Grafica;
import com.carlos.pruebas.obj.GraficaBarra;
import com.carlos.pruebas.obj.GraficaPie;

import java_cup.runtime.*;

class ParserGraphics;

parser code {:
    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";
    private static final String ERROR_TYPE_EJE = "Ejecucion";
    private static final String ERROR_TYPE_CRE = "Creacion";

    private Lexer lexer;
    private SimbolosTerminales simbolosTerminales;
    private ArrayList<OcurrenciaOperador> ocurrencias;
    private ArrayList<Grafica> graficasGeneradas;
    private ArrayList<String> graficasEjecutar;

    
    public ParserGraphics (Lexer lexer){ 
        super(lexer);
        this.lexer=lexer;
        this.simbolosTerminales = new SimbolosTerminales();
        this.ocurrencias = new ArrayList<>();
        this.graficasGeneradas = new ArrayList<>();
        this.graficasEjecutar = new ArrayList<>();
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            System.out.println(er);
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserGraphicsSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            System.out.println(er);
        }
    }

    private void semantic_error(Token token,String contexto) {
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    private boolean definition_error(Token ini,Token fin,ArrayList<String> errores){
        boolean status = false;
        for (String errore : errores) {
            status = true;
            String error = "Error en definicion, "+errore+" Ubicacion general --> Linea: "+ini.getLinea()+" a Linea: "+fin.getLinea();
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, ini.getLexema(), ini.getLinea(), ini.getColumna(), error));
            System.out.println(error);
        }
        return status;
    }

    private void execution_error_grap(Token token,String nameGra){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_EJE, nameGra, token.getLinea(), token.getColumna(), "La grafica que desea ejecutar no existe"));
    }

    private void error_grap_def(Token token,String nameGra){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_CRE, nameGra, token.getLinea(), token.getColumna(), ", Ya existe una grafica con ese titulo asigne uno distinto"));
    }

    private void referencia_numerica_incorrecta(Token token,Double valor){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,valor.toString(), token.getLinea(),(token.getColumna()+1), ", Se espera un valor entero o una operacion con resultado entero"));
    }

    public ArrayList<OcurrenciaOperador> getOcurrencias() {
        return ocurrencias;
    }

    public ArrayList<Grafica> getGraficasGeneradas() {
        return graficasGeneradas;
    }

    public ArrayList<String> getGraficasEjecutar() {
        return graficasEjecutar;
    }

    private boolean buscarGrafica(String nombre){
        for (Grafica graficasGenerada : this.graficasGeneradas) {
            if(graficasGenerada.getTitulo().equals(nombre)){
                return true;
            }
        }
        return false;
    }

    protected int error_sync_size() {
		return 1;
	}
:}

/* define how to connect to the scanner! */
scan with {: return this.lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            DEF, GRAPHICBARRA,GRAPHICPIE, TITTLE, EJEX, EJEY, LABEL, VALUES,
                    LINK,TYPE,TYPEVALUE,TOTAL,EXTRA,EXECUTE,MAS,MENOS,MUL,DIV,PA_A,
                    PA_C,CO_A,CO_C,LLA_A,LLA_C,COMA,DOSPUNTOS,PUNTOCOMA,STRING,NUMBERS,
                    DECIMAL;


/* Non terminals */
non terminal                    s;
non terminal GraficaPie         contPie;
non terminal GraficaBarra       contBarra;
non terminal Pila<Double>       contEjeY;
non terminal Pila<String>       contEjeX;
non terminal Pila<Union>        contUnir;   
non terminal Double             e;
non terminal InicioOperacion    t,f;


/* The grammar rules */

s   ::= s DEF:ini GRAPHICBARRA contBarra:gb LLA_C:fin   {:
                                                            if(gb!=null){
                                                                System.out.println("Grafica: "+gb.getTitulo());
                                                                if(buscarGrafica(gb.getTitulo())){
                                                                    System.out.println("La Grafica: "+gb.getTitulo()+", ya existe");
                                                                    error_grap_def((Token) ini, gb.getTitulo());
                                                                }else{
                                                                    if(!definition_error((Token)ini,(Token)fin,gb.verificarGrafica())){
                                                                        graficasGeneradas.add(gb);
                                                                        System.out.println("Grafica Valida");
                                                                    }else{
                                                                        System.out.println("Grafica No Valida");
                                                                    }
                                                                }
                                                            }
                                                        :}
    |   s DEF:ini GRAPHICPIE contPie:gp LLA_C:fin   {:
                                                        if(gp!=null){
                                                            System.out.println("Grafica: "+gp.getTitulo());
                                                            if(buscarGrafica(gp.getTitulo())){
                                                                System.out.println("La Grafica: "+gp.getTitulo()+", ya existe");
                                                                error_grap_def((Token) ini, gp.getTitulo());
                                                            }else{
                                                                if(!definition_error((Token)ini,(Token)fin,gp.verificarGrafica())){
                                                                    graficasGeneradas.add(gp);
                                                                    System.out.println("Grafica Valida");
                                                                }else{
                                                                    System.out.println("Grafica No Valida");
                                                                }
                                                            }
                                                        }
                                                    :}
    |   s EXECUTE:ex PA_A STRING:gn PA_C PUNTOCOMA  {:
                                                        System.out.println("Grafico ejecutar: "+(String)((Token)gn).getValue());
                                                        Token strin = (Token) gn;
                                                        Token exe = (Token) ex;
                                                        if(buscarGrafica((String) strin.getValue())){
                                                            graficasEjecutar.add((String) strin.getValue());
                                                        }else{
                                                            System.out.println("---La Grafica no existe");
                                                            execution_error_grap(exe, (String) strin.getValue());
                                                        }
                                                    :}
    |   DEF:ini GRAPHICBARRA contBarra:gb LLA_C:fin {:
                                                        if(gb!=null){
                                                            System.out.println("Grafica: "+gb.getTitulo());
                                                            if(buscarGrafica(gb.getTitulo())){
                                                                System.out.println("La Grafica: "+gb.getTitulo()+", ya existe");
                                                                error_grap_def((Token) ini, gb.getTitulo());
                                                            }else{
                                                                if(!definition_error((Token)ini,(Token)fin,gb.verificarGrafica())){
                                                                    graficasGeneradas.add(gb);
                                                                    System.out.println("Grafica Valida");
                                                                }else{
                                                                    System.out.println("Grafica No Valida");
                                                                }
                                                            }
                                                        }
                                                    :}
    |   DEF:ini GRAPHICPIE contPie:gp LLA_C:fin {:
                                                    if(gp!=null){
                                                        System.out.println("Grafica: "+gp.getTitulo());
                                                        if(buscarGrafica(gp.getTitulo())){
                                                            System.out.println("La Grafica: "+gp.getTitulo()+", ya existe");
                                                            error_grap_def((Token) ini, gp.getTitulo());
                                                        }else{
                                                            if(!definition_error((Token)ini,(Token)fin,gp.verificarGrafica())){
                                                                graficasGeneradas.add(gp);
                                                                System.out.println("Grafica Valida");
                                                            }else{
                                                                System.out.println("Grafica No Valida");
                                                            }
                                                        }
                                                    }
                                                :}
    ;

//CONTENIDO DE UNA GRAFICA DE BARRAS

contBarra   ::= contBarra:gb TITTLE:e DOSPUNTOS STRING:titulo PUNTOCOMA {:
                                                                            if(gb !=null){
                                                                                RESULT = gb;
                                                                                if(RESULT.getTitulo()!=null){
                                                                                    semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                }else{
                                                                                    String tittle = (String)((Token)titulo).getValue();
                                                                                    RESULT.setTitulo(tittle);
                                                                                }
                                                                            }
                                                                        :}
            |   contBarra:gb EJEX:e DOSPUNTOS CO_A contEjeX:pila PUNTOCOMA  {:
                                                                                if(gb !=null){
                                                                                    RESULT = gb;
                                                                                    if(RESULT.getEjex()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setEjex(pila.toArray(String[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            :}
            |   contBarra:gb EJEY:e DOSPUNTOS CO_A contEjeY:pila PUNTOCOMA  {:
                                                                                if(gb !=null){
                                                                                    RESULT = gb;
                                                                                    if(RESULT.getEjey()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setEjey(pila.toArray(Double[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            :}
            |   contBarra:gb LINK:e DOSPUNTOS CO_A contUnir:pila PUNTOCOMA  {:
                                                                                
                                                                                if(gb !=null){
                                                                                    RESULT = gb;
                                                                                    if(RESULT.getUnir()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setUnir(pila.toArrayList());
                                                                                        }
                                                                                    }
                                                                                }
                                                                            :}
            |   LLA_A                                                       {:
                                                                                RESULT = new GraficaBarra();
                                                                            :}
            |   contBarra error
            ;

contPie     ::= contPie:gp TITTLE:e DOSPUNTOS STRING:titulo PUNTOCOMA   {:
                                                                            if(gp!=null){
                                                                                RESULT = gp;
                                                                                if(RESULT.getTitulo()!=null){
                                                                                    semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                }else{
                                                                                    RESULT.setTitulo((String)((Token)titulo).getValue());
                                                                                }
                                                                            }
                                                                        :}
            |   contPie:gp TYPE:e DOSPUNTOS TYPEVALUE:tipo PUNTOCOMA    {:
                                                                            if(gp!=null){
                                                                                RESULT = gp;
                                                                                if(RESULT.getTipo()!=null){
                                                                                    semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                }else{
                                                                                    RESULT.setTipo((String)((Token)tipo).getValue());
                                                                                }
                                                                                
                                                                            }
                                                                        :}
            |   contPie:gp LABEL:e DOSPUNTOS CO_A contEjeX:pila PUNTOCOMA   {:
                                                                                
                                                                                if(gp!=null){
                                                                                    RESULT = gp;
                                                                                    if(RESULT.getEtiquetas()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setEtiquetas(pila.toArray(String[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            :}
            |   contPie:gp VALUES:e DOSPUNTOS CO_A contEjeY:pila PUNTOCOMA  {:
                                                                                
                                                                                if(gp!=null){
                                                                                    RESULT = gp;
                                                                                    if(RESULT.getValores()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setValores(pila.toArray(Double[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            :} 
            |   contPie:gp TOTAL:e DOSPUNTOS e:num PUNTOCOMA    {:
                                                                    if(gp!=null){
                                                                        RESULT = gp;
                                                                        if(RESULT.getTotal()!=null){
                                                                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                        }else{
                                                                            if(num!=null){
                                                                                RESULT.setTotal(num);
                                                                            }
                                                                        }
                                                                    }
                                                                :}
            |   contPie:gp LINK:e DOSPUNTOS CO_A contUnir:pila PUNTOCOMA    {:
                                                                                
                                                                                if(gp!=null){
                                                                                    RESULT = gp;
                                                                                    if(RESULT.getUnir()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setUnir(pila.toArrayList());
                                                                                        }
                                                                                    }
                                                                                }
                                                                                
                                                                            :}
            |   contPie:gp EXTRA:e DOSPUNTOS STRING:extra PUNTOCOMA   {:
                                                                        if(gp!=null){
                                                                            RESULT = gp;
                                                                            if(RESULT.getExtra()!=null){
                                                                                semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                            }else{
                                                                                RESULT.setExtra((String)((Token)extra).getValue());
                                                                            }
                                                                        }
                                                                    :}
            |   LLA_A   {:
                            RESULT = new GraficaPie();
                        :}
            |   contPie error
            ;


//GRAMAICA PARA EL RECONOCIMIENTO DE NUMEROS ENTEROS Y DECIMALES
e   ::= e:num1 MAS:s t:num2   {:
                                Token operador = (Token) s;
                                if(num2!=null&&num1!=null){
                                    String ocu = operador.getAntToken().getLexema() + " + " +num2.getToken().getLexema();
                                    ocurrencias.add(new OcurrenciaOperador("MAS",operador.getLinea(),operador.getColumna(),ocu));
                                    RESULT = num1+num2.getValue();
                                }
                            :}
    |   e:num1 MENOS:s t:num2   {:
                                    Token operador = (Token) s;
                                    if(num2!=null&&num1!=null){
                                        String ocu = operador.getAntToken().getLexema() + " - " +num2.getToken().getLexema();
                                        ocurrencias.add(new OcurrenciaOperador("MENOS",operador.getLinea(),operador.getColumna(),ocu));
                                        RESULT = num1-num2.getValue();
                                    }
                                :}
    |   t:exp               {:
                                if(exp!=null){
                                    RESULT = exp.getValue();
                                }
                            :}
    ;

t   ::= t:num1 MUL:s f:num2 {:
                                Token operador = (Token) s;
                                if(num1!=null&&num2!=null){
                                    num2.setValue(num1.getValue()*num2.getValue());
                                    String ocu = operador.getAntToken().getLexema() + " * " +num2.getToken().getLexema();
                                    ocurrencias.add(new OcurrenciaOperador("Multiplicación",operador.getLinea(),operador.getColumna(),ocu));
                                }
                                RESULT = num2;
                            :}
    |   t:num1 DIV:s f:num2 {:
                                Token operador = (Token) s;
                                if(num1!=null&&num2!=null){
                                    num2.setValue(num1.getValue()/num2.getValue());
                                    String ocu = operador.getAntToken().getLexema() + " / " +num2.getToken().getLexema();
                                    ocurrencias.add(new OcurrenciaOperador("División",operador.getLinea(),operador.getColumna(),ocu));
                                }
                                RESULT = num2;
                            :}             
    |   f:exp               {:
                                RESULT = exp;
                            :}
    ;

f   ::= NUMBERS:num     {:
                            Token tmp = (Token) num;
                            RESULT = new InicioOperacion((Double) tmp.getValue(),tmp);
                        :}
    |   DECIMAL:num     {:
                            Token tmp = (Token) num;
                            RESULT = new InicioOperacion((Double) tmp.getValue(),tmp);
                        :}
    |   PA_A:ini e:exp PA_C {:
                                RESULT = new InicioOperacion(exp,(Token)ini);
                            :}
    |   error f
    ;
// recuperacion de vectores del lenguaje
contEjeY    ::= e:num1 COMA contEjeY:pila   {:
                                                RESULT = pila;
                                                if(RESULT != null){
                                                    RESULT.push(num1);
                                                }
                                            :}
            |   e:num1 CO_C {:
                                RESULT = new Pila<>();
                                RESULT.push(num1);
                            :}
            ;

contEjeX    ::= STRING:cadena COMA contEjeX:pila    {:
                                                        RESULT = pila;
                                                        if(RESULT!=null){
                                                            String strin = (String)((Token)cadena).getValue();
                                                            RESULT.push(strin);                    
                                                        }
                                                    :}
            |   STRING:cadena CO_C  {:
                                        RESULT = new Pila<>();
                                        String strin = (String)((Token)cadena).getValue();
                                        RESULT.push(strin);
                                    :}
            ;

contUnir    ::= LLA_A:ref1 e:num1 COMA:ref2 e:num2 LLA_C COMA contUnir:pila {:
                                                                                RESULT = pila;
                                                                                if(RESULT!=null){
                                                                                    if(num1!=null && num2!=null){
                                                                                        Double mod1 = num1 % 2;
                                                                                        Double mod2 = num2 % 2;
                                                                                        if((mod1==1||mod1==0)&&(mod2==1||mod2==0)){
                                                                                            System.out.println("Los dos datos son enteros");
                                                                                            RESULT.push(new Union(num1.intValue(),num2.intValue()));
                                                                                        }else{
                                                                                            if(!(mod1==1||mod1==0)){
                                                                                                referencia_numerica_incorrecta((Token) ref1, num1);
                                                                                            }
                                                                                            if(!(mod2==1||mod2==0)){
                                                                                                referencia_numerica_incorrecta((Token) ref2, num2);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            :}
            |   LLA_A:ref1 e:num1 COMA:ref2 e:num2 LLA_C CO_C            {:
                                                                            if(num1!=null && num2!=null){
                                                                                RESULT = new Pila<>();
                                                                                Double mod1 = num1 % 2;
                                                                                Double mod2 = num2 % 2;

                                                                                if((mod1==1||mod1==0)&&(mod2==1||mod2==0)){
                                                                                    System.out.println("Los dos datos son enteros");
                                                                                    RESULT.push(new Union(num1.intValue(),num2.intValue()));
                                                                                }else{
                                                                                    if(!(mod1==1||mod1==0)){
                                                                                        referencia_numerica_incorrecta((Token) ref1, num1);
                                                                                    }
                                                                                    if(!(mod2==1||mod2==0)){
                                                                                        referencia_numerica_incorrecta((Token) ref2, num2);
                                                                                    }
                                                                                }
                                                                            }
                                                                        :}
            ;