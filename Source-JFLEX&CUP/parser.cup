package com.carlos.pruebas.lexerParser;

import java_cup.runtime.*;

class ParserGraphics;

parser code {:
    // Connect this parser to a scanner!
    private Lexer lexer;
    
    public ParserGraphics (Lexer lexer){ 
        super(lexer);
        this.lexer=lexer;
    }
:}

/* define how to connect to the scanner! */
scan with {: return this.lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            DEF, GRAPHICBARRA,GRAPHICPIE, TITTLE, EJEX, EJEY, LABEL, VALUES,
                    LINK,TYPE,TYPEVALUE,TOTAL,EXTRA,EXECUTE,MAS,MENOS,MUL,DIV,PA_A,
                    PA_C,CO_A,CO_C,LLA_A,LLA_C,COMA,DOSPUNTOS,PUNTOCOMA,STRING,NUMBERS,
                    DECIMAL;


/* Non terminals */
non terminal            s,graps,ej;
non terminal Double     e,t,f;

/* The grammar rules */

s   ::= graps s
    |   graps ej
    ;

graps   ::= DEF GRAPHICBARRA LLA_A LLA_C    {:
                                                System.out.println("Grafica de barra");
                                            :}
        |   DEF GRAPHICPIE LLA_A LLA_C      {:
                                                System.out.println("Grafica de pie");
                                            :}
        ;

ej  ::= EXECUTE PA_A STRING PA_C PUNTOCOMA ej   {:
                                                    System.out.println("Instruccion de ejecucion");
                                                :}
    |   EXECUTE PA_A STRING PA_C PUNTOCOMA      {:
                                                    System.out.println("Instruccion de ejecucion");
                                                :}
    ;







//GRAMAICA PARA EL RECONOCIMIENTO DE NUMEROS ENTEROS Y DECIMALES
e   ::= e:num1 MAS t:num2   {:
                                RESULT = (num1 + num2);
                            :}
    |   e:num1 MENOS t:num2 {:
                                RESULT = (num1 - num2);
                            :}
    |   t:exp               {:
                                RESULT = exp;
                            :}
    ;

t   ::= t:num1 MUL f:num2   {:
                                RESULT = (num1*num2);
                            :}
    |   t:num1 DIV f:num2   {:
                                RESULT = (num1/num2);
                            :}             
    |   f:exp               {:
                                RESULT = exp;
                            :}
    ;

f   ::= NUMBERS:num     {:
                            RESULT = (Double) ((Token)num).getValue();
                        :}
    |   DECIMAL:num     {:
                            RESULT = (Double) ((Token)num).getValue();
                        :}
    |   PA_A e:exp PA_C
                        {:
                            RESULT = exp;
                        :}
    ;