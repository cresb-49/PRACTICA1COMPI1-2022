package com.carlos.pruebas.lexerParser;

import com.carlos.pruebas.ED.Pila;
import com.carlos.pruebas.obj.Token;
import com.carlos.pruebas.obj.Union;

import com.carlos.pruebas.obj.GraficaBarra;
import com.carlos.pruebas.obj.GraficaPie;

import java_cup.runtime.*;

class ParserGraphics;

parser code {:
    // Connect this parser to a scanner!
    private Lexer lexer;
    
    public ParserGraphics (Lexer lexer){ 
        super(lexer);
        this.lexer=lexer;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + ParserGraphicsSym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserGraphicsSym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }

:}

/* define how to connect to the scanner! */
scan with {: return this.lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            DEF, GRAPHICBARRA,GRAPHICPIE, TITTLE, EJEX, EJEY, LABEL, VALUES,
                    LINK,TYPE,TYPEVALUE,TOTAL,EXTRA,EXECUTE,MAS,MENOS,MUL,DIV,PA_A,
                    PA_C,CO_A,CO_C,LLA_A,LLA_C,COMA,DOSPUNTOS,PUNTOCOMA,STRING,NUMBERS,
                    DECIMAL;


/* Non terminals */
non terminal                s,graps,ej;
non terminal GraficaPie     contPie;
non terminal GraficaBarra   contBarra;
non terminal Pila<Double>   contEjeY;
non terminal Pila<String>   contEjeX;
non terminal Pila<Union>    contUnir;   
non terminal Double         e,t,f;


/* The grammar rules */

s   ::= graps s
    |   graps ej
    |   graps
    ;

graps   ::= DEF GRAPHICBARRA LLA_A contBarra    {:
                                                    System.out.println("Grafica de barra");
                                                :}
        |   DEF GRAPHICPIE LLA_A contPie        {:
                                                    System.out.println("Grafica de pie");
                                                :}
        ;

ej  ::= EXECUTE PA_A STRING PA_C PUNTOCOMA ej   {:
                                                    System.out.println("Instruccion de ejecucion");
                                                :}
    |   EXECUTE PA_A STRING PA_C PUNTOCOMA      {:
                                                    System.out.println("Instruccion de ejecucion");
                                                :}
    ;


//CONTENIDO DE UNA GRAFICA DE BARRAS

contBarra   ::= TITTLE DOSPUNTOS STRING:titulo PUNTOCOMA contBarra  {:
                                                                        //String tittle = (String)((Token)titulo).getValue();
                                                                        //System.out.println("Titulo de grafico: "+tittle);
                                                                    :}
            |   EJEX DOSPUNTOS CO_A contEjeX:pila PUNTOCOMA contBarra   {:
                                                                            if(pila!=null){
                                                                                //System.out.println("Datos del eje x");
                                                                                //pila.imprimirPila();
                                                                            }
                                                                        :}
            |   EJEY DOSPUNTOS CO_A contEjeY:pila PUNTOCOMA contBarra   {:
                                                                            if(pila!=null){
                                                                                //System.out.println("Datos del eje y");
                                                                                //pila.imprimirPila();
                                                                            }
                                                                        :}
            |   LINK DOSPUNTOS CO_A contUnir:pila PUNTOCOMA contBarra   {:
                                                                            if(pila!=null){
                                                                                //System.out.println("Datos de union");
                                                                                //pila.imprimirPila();
                                                                            }
                                                                        :}
            |   LLA_C
            ;

contEjeY    ::= e:num1 COMA contEjeY:pila   {:
                                                RESULT = pila;
                                                if(RESULT != null){
                                                    RESULT.push(num1);
                                                }
                                            :}
            |   e:num1 CO_C {:
                                RESULT = new Pila<>();
                                RESULT.push(num1);
                            :}
            ;

contEjeX    ::= STRING:cadena COMA contEjeX:pila    {:
                                                        RESULT = pila;
                                                        if(RESULT!=null){
                                                            String strin = (String)((Token)cadena).getValue();
                                                            RESULT.push(strin);                    
                                                        }
                                                    :}
            |   STRING:cadena CO_C  {:
                                        RESULT = new Pila<>();
                                        String strin = (String)((Token)cadena).getValue();
                                        RESULT.push(strin);
                                    :}
            ;

contUnir    ::= LLA_A e:num1 COMA e:num2 LLA_C COMA contUnir:pila   {:
                                                                        RESULT = pila;
                                                                        if(RESULT!=null){
                                                                            RESULT.push(new Union(num1.intValue(),num2.intValue()));    
                                                                        }
                                                                    :}
            |   LLA_A e:num1 COMA e:num2 LLA_C CO_C                 {:
                                                                        RESULT = new Pila<>();
                                                                        RESULT.push(new Union(num1.intValue(),num2.intValue()));
                                                                    :}
            ;

contPie     ::= TITTLE DOSPUNTOS STRING PUNTOCOMA contPie
            |   TYPE DOSPUNTOS TYPEVALUE PUNTOCOMA contPie
            |   LABEL DOSPUNTOS CO_A contEjeX PUNTOCOMA contPie
            |   VALUES DOSPUNTOS CO_A contEjeY PUNTOCOMA contPie
            |   TOTAL DOSPUNTOS e PUNTOCOMA contPie
            |   LINK DOSPUNTOS CO_A contUnir PUNTOCOMA contPie
            |   EXTRA DOSPUNTOS STRING PUNTOCOMA contPie
            |   LLA_C
            ;


//GRAMAICA PARA EL RECONOCIMIENTO DE NUMEROS ENTEROS Y DECIMALES
e   ::= e:num1 MAS t:num2   {:
                                RESULT = (num1 + num2);
                            :}
    |   e:num1 MENOS t:num2 {:
                                RESULT = (num1 - num2);
                            :}
    |   t:exp               {:
                                RESULT = exp;
                            :}
    ;

t   ::= t:num1 MUL f:num2   {:
                                RESULT = (num1*num2);
                            :}
    |   t:num1 DIV f:num2   {:
                                RESULT = (num1/num2);
                            :}             
    |   f:exp               {:
                                RESULT = exp;
                            :}
    ;

f   ::= NUMBERS:num     {:
                            RESULT = (Double) ((Token)num).getValue();
                        :}
    |   DECIMAL:num     {:
                            RESULT = (Double) ((Token)num).getValue();
                        :}
    |   PA_A e:exp PA_C
                        {:
                            RESULT = exp;
                        :}
    ;