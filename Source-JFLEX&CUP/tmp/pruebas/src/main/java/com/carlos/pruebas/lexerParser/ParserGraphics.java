
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.carlos.pruebas.lexerParser;

import java.util.ArrayList;
import com.carlos.pruebas.obj.ErrorAnalisis;
import com.carlos.pruebas.ED.Pila;
import com.carlos.pruebas.obj.Token;
import com.carlos.pruebas.obj.Union;
import com.carlos.pruebas.obj.OcurrenciaOperador;
import com.carlos.pruebas.obj.Grafica;
import com.carlos.pruebas.obj.GraficaBarra;
import com.carlos.pruebas.obj.GraficaPie;
import com.carlos.pruebas.obj.VerficacionValuesPie;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserGraphics extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserGraphicsSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserGraphics() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserGraphics(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserGraphics(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\002\003\000\002\004\007\000" +
    "\002\006\006\000\002\005\006\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\010\010\000\002\010" +
    "\003\000\002\010\004\000\002\010\004\000\002\007\007" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\007\007\000\002\007\010\000\002\007\007\000\002" +
    "\007\003\000\002\007\004\000\002\007\004\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\017\003" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\005\000\002" +
    "\022\004\000\002\011\005\000\002\012\005\000\002\012" +
    "\003\000\002\013\005\000\002\014\005\000\002\014\003" +
    "\000\002\015\010\000\002\016\011\000\002\016\003\000" +
    "\002\016\004\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\020\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\003\000\002\024\003\000\002\024\005" +
    "\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\004\004\006\001\002\000\012\002\ufffb\003" +
    "\ufffb\004\ufffb\021\ufffb\001\002\000\012\002\ufffa\003\ufffa" +
    "\004\ufffa\021\ufffa\001\002\000\006\005\024\006\023\001" +
    "\002\000\012\002\uffff\003\uffff\004\006\021\uffff\001\002" +
    "\000\010\002\014\003\012\021\011\001\002\000\004\026" +
    "\015\001\002\000\010\002\ufffe\003\ufffe\021\ufffe\001\002" +
    "\000\010\002\001\003\001\021\001\001\002\000\004\002" +
    "\000\001\002\000\004\037\016\001\002\000\004\027\017" +
    "\001\002\000\004\036\020\001\002\000\010\002\ufff9\003" +
    "\ufff9\021\ufff9\001\002\000\012\002\ufffd\003\ufffd\004\ufffd" +
    "\021\ufffd\001\002\000\012\002\ufffc\003\ufffc\004\ufffc\021" +
    "\ufffc\001\002\000\006\003\155\032\156\001\002\000\006" +
    "\003\025\032\026\001\002\000\004\036\154\001\002\000" +
    "\016\003\ufff2\007\ufff2\010\ufff2\011\ufff2\014\ufff2\033\ufff2" +
    "\001\002\000\016\003\032\007\033\010\035\011\034\014" +
    "\030\033\031\001\002\000\004\035\107\001\002\000\012" +
    "\002\ufff8\003\ufff8\004\ufff8\021\ufff8\001\002\000\016\003" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\014\ufff1\033\ufff1\001\002" +
    "\000\004\035\104\001\002\000\004\035\050\001\002\000" +
    "\004\035\036\001\002\000\004\030\037\001\002\000\004" +
    "\037\042\001\002\000\004\036\041\001\002\000\016\003" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\014\ufff5\033\ufff5\001\002" +
    "\000\006\031\044\034\043\001\002\000\004\037\046\001" +
    "\002\000\004\036\uffd5\001\002\000\004\036\uffd7\001\002" +
    "\000\006\031\044\034\043\001\002\000\004\036\uffd6\001" +
    "\002\000\004\030\051\001\002\000\012\003\054\026\062" +
    "\040\056\041\061\001\002\000\004\036\053\001\002\000" +
    "\016\003\ufff4\007\ufff4\010\ufff4\011\ufff4\014\ufff4\033\ufff4" +
    "\001\002\000\026\003\067\022\uffe2\023\uffe2\026\062\027" +
    "\uffe2\031\uffe2\034\uffe2\036\uffe2\040\056\041\061\001\002" +
    "\000\022\022\uffe3\023\uffe3\024\071\025\072\027\uffe3\031" +
    "\uffe3\034\uffe3\036\uffe3\001\002\000\024\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\027\uffde\031\uffde\033\uffde\034\uffde\036" +
    "\uffde\001\002\000\022\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\027\uffdf\031\uffdf\034\uffdf\036\uffdf\001\002\000\012\022" +
    "\064\023\065\031\100\034\077\001\002\000\024\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\027\uffdd\031\uffdd\033\uffdd\034" +
    "\uffdd\036\uffdd\001\002\000\012\003\054\026\062\040\056" +
    "\041\061\001\002\000\010\022\064\023\065\027\066\001" +
    "\002\000\012\003\067\026\062\040\056\041\061\001\002" +
    "\000\012\003\067\026\062\040\056\041\061\001\002\000" +
    "\024\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc\031\uffdc" +
    "\033\uffdc\034\uffdc\036\uffdc\001\002\000\012\003\067\026" +
    "\062\040\056\041\061\001\002\000\022\022\uffe4\023\uffe4" +
    "\024\071\025\072\027\uffe4\031\uffe4\034\uffe4\036\uffe4\001" +
    "\002\000\012\003\067\026\062\040\056\041\061\001\002" +
    "\000\012\003\067\026\062\040\056\041\061\001\002\000" +
    "\022\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\031\uffe0" +
    "\034\uffe0\036\uffe0\001\002\000\022\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\027\uffe1\031\uffe1\034\uffe1\036\uffe1\001\002" +
    "\000\024\022\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\031" +
    "\uffdb\033\uffdb\034\uffdb\036\uffdb\001\002\000\022\022\uffe5" +
    "\023\uffe5\024\071\025\072\027\uffe5\031\uffe5\034\uffe5\036" +
    "\uffe5\001\002\000\012\003\054\026\062\040\056\041\061" +
    "\001\002\000\004\036\uffd8\001\002\000\004\036\uffda\001" +
    "\002\000\012\022\064\023\065\031\100\034\077\001\002" +
    "\000\004\036\uffd9\001\002\000\004\037\105\001\002\000" +
    "\004\036\106\001\002\000\016\003\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\014\ufff6\033\ufff6\001\002\000\004\030\110\001" +
    "\002\000\004\032\112\001\002\000\004\036\153\001\002" +
    "\000\010\003\115\026\120\040\116\001\002\000\010\022" +
    "\132\023\133\034\131\001\002\000\016\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\033\uffca\034\uffca\001\002\000\022\003" +
    "\067\022\uffcd\023\uffcd\026\062\033\uffcd\034\uffcd\040\056" +
    "\041\061\001\002\000\016\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\033\uffc9\034\uffc9\001\002\000\016\022\uffce\023\uffce" +
    "\024\123\025\124\033\uffce\034\uffce\001\002\000\012\003" +
    "\054\026\062\040\056\041\061\001\002\000\010\022\064" +
    "\023\065\027\122\001\002\000\016\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\033\uffc8\034\uffc8\001\002\000\010\003\125" +
    "\026\120\040\116\001\002\000\010\003\125\026\120\040" +
    "\116\001\002\000\012\003\067\026\062\040\056\041\061" +
    "\001\002\000\016\022\uffcb\023\uffcb\024\uffcb\025\uffcb\033" +
    "\uffcb\034\uffcb\001\002\000\016\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\033\uffc7\034\uffc7\001\002\000\016\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\033\uffcc\034\uffcc\001\002\000\010" +
    "\003\115\026\120\040\116\001\002\000\010\003\125\026" +
    "\120\040\116\001\002\000\010\003\125\026\120\040\116" +
    "\001\002\000\016\022\uffcf\023\uffcf\024\123\025\124\033" +
    "\uffcf\034\uffcf\001\002\000\016\022\uffd0\023\uffd0\024\123" +
    "\025\124\033\uffd0\034\uffd0\001\002\000\010\022\132\023" +
    "\133\033\137\001\002\000\010\003\143\031\141\034\140" +
    "\001\002\000\004\032\145\001\002\000\004\036\uffd2\001" +
    "\002\000\004\036\uffd4\001\002\000\010\003\143\031\141" +
    "\034\140\001\002\000\004\036\uffd1\001\002\000\010\003" +
    "\115\026\120\040\116\001\002\000\010\022\132\023\133" +
    "\034\147\001\002\000\010\003\115\026\120\040\116\001" +
    "\002\000\010\022\132\023\133\033\151\001\002\000\010" +
    "\003\143\031\141\034\140\001\002\000\004\036\uffd3\001" +
    "\002\000\016\003\ufff3\007\ufff3\010\ufff3\011\ufff3\014\ufff3" +
    "\033\ufff3\001\002\000\016\003\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\014\ufff0\033\ufff0\001\002\000\004\036\217\001\002" +
    "\000\024\003\uffe8\007\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\017\uffe8\020\uffe8\033\uffe8\001\002\000\024\003\165" +
    "\007\160\012\162\013\167\014\164\015\163\017\161\020" +
    "\170\033\166\001\002\000\004\035\214\001\002\000\004" +
    "\035\211\001\002\000\004\035\206\001\002\000\004\035" +
    "\203\001\002\000\004\035\177\001\002\000\024\003\uffe7" +
    "\007\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\020" +
    "\uffe7\033\uffe7\001\002\000\012\002\ufff7\003\ufff7\004\ufff7" +
    "\021\ufff7\001\002\000\004\035\174\001\002\000\004\035" +
    "\171\001\002\000\004\037\172\001\002\000\004\036\173" +
    "\001\002\000\024\003\uffe9\007\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\017\uffe9\020\uffe9\033\uffe9\001\002\000\004" +
    "\030\051\001\002\000\004\036\176\001\002\000\024\003" +
    "\uffec\007\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec" +
    "\020\uffec\033\uffec\001\002\000\004\030\200\001\002\000" +
    "\004\032\112\001\002\000\004\036\202\001\002\000\024" +
    "\003\uffea\007\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017" +
    "\uffea\020\uffea\033\uffea\001\002\000\004\016\204\001\002" +
    "\000\004\036\205\001\002\000\024\003\uffee\007\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\017\uffee\020\uffee\033\uffee" +
    "\001\002\000\004\030\037\001\002\000\004\036\210\001" +
    "\002\000\024\003\uffed\007\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\017\uffed\020\uffed\033\uffed\001\002\000\012\003" +
    "\054\026\062\040\056\041\061\001\002\000\010\022\064" +
    "\023\065\036\213\001\002\000\024\003\uffeb\007\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\033\uffeb" +
    "\001\002\000\004\037\215\001\002\000\004\036\216\001" +
    "\002\000\024\003\uffef\007\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\017\uffef\020\uffef\033\uffef\001\002\000\024\003" +
    "\uffe6\007\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6" +
    "\020\uffe6\033\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\012\002\006\003\007\005\004\006\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\021\006\020\001\001\000\004\004\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\156\001\001\000\004\010\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\046\001" +
    "\001\000\002\001\001\000\004\011\051\001\001\000\010" +
    "\017\057\021\054\022\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\100\001" +
    "\001\000\002\001\001\000\010\017\062\021\054\022\056" +
    "\001\001\000\002\001\001\000\006\021\075\022\056\001" +
    "\001\000\006\021\067\022\056\001\001\000\002\001\001" +
    "\000\004\022\074\001\001\000\002\001\001\000\004\022" +
    "\073\001\001\000\004\022\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\101\021\054\022\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\110\001\001\000\002\001" +
    "\001\000\010\020\112\023\116\024\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\120\021\054" +
    "\022\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\127\001\001\000\004\024\125\001\001\000\004" +
    "\022\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\135\023\116\024\113\001\001" +
    "\000\006\023\134\024\113\001\001\000\006\023\133\024" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\143\001\001" +
    "\000\002\001\001\000\010\020\145\023\116\024\113\001" +
    "\001\000\002\001\001\000\010\020\147\023\116\024\113" +
    "\001\001\000\002\001\001\000\004\016\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\211\021\054\022\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserGraphics$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserGraphics$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserGraphics$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.lexer.next_token(); 
    }


    // Connect this parser to a scanner!

    private static final String ERROR_TYPE_SIN = "Sintactico";
    private static final String ERROR_TYPE_SEM = "Semantico";
    private static final String ERROR_TYPE_EJE = "Ejecucion";
    private static final String ERROR_TYPE_CRE = "Creacion";

    private Lexer lexer;
    private VerficacionValuesPie verficacionValuesPie;
    private SimbolosTerminales simbolosTerminales;
    private ArrayList<OcurrenciaOperador> ocurrencias;
    private ArrayList<Grafica> graficasGeneradas;
    private ArrayList<String> graficasEjecutar;
    private ArrayList<ErrorAnalisis> errorAnalisisesTmp;

    
    public ParserGraphics (Lexer lexer){ 
        super(lexer);
        this.lexer=lexer;
        this.simbolosTerminales = new SimbolosTerminales();
        this.ocurrencias = new ArrayList<>();
        this.graficasGeneradas = new ArrayList<>();
        this.graficasEjecutar = new ArrayList<>();
        this.verficacionValuesPie= new VerficacionValuesPie();
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token tok = (Token) cur_token.value;
        if(tok!=null){
            if (cur_token.sym == ParserGraphicsSym.EOF) {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
                System.out.println(er);
            } else {
                String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
                System.out.println(er);
            }
        }else{
            String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserGraphicsSym.EOF) {
            String er = "Error irrecuperable se llego al final del archivo";
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,"FIN ARCHIVO", cur_token.left, cur_token.right, er));
            System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN, tok.getLexema(), tok.getLinea(), tok.getColumna(), er));
            System.out.println(er);
        }
    }

    private void semantic_error(Token token,String contexto) {
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM,token.getLexema(), token.getLinea(), token.getColumna(), contexto));
    }

    private boolean definition_error(Token ini,Token fin,ArrayList<String> errores){
        boolean status = false;
        for (String errore : errores) {
            status = true;
            String error = "Error en definicion, "+errore+" Ubicacion general --> Linea: "+ini.getLinea()+" a Linea: "+fin.getLinea();
            this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, ini.getLexema(), ini.getLinea(), ini.getColumna(), error));
            System.out.println(error);
        }
        return status;
    }

    private void execution_error_grap(Token token,String nameGra){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_EJE, nameGra, token.getLinea(), token.getColumna(), "La grafica que desea ejecutar no existe"));
    }

    private void error_grap_def(Token token,String nameGra){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_CRE, nameGra, token.getLinea(), token.getColumna(), ", Ya existe una grafica con ese titulo asigne uno distinto"));
    }

    private void referencia_numerica_incorrecta(Token token,Double valor){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SIN,valor.toString(), token.getLinea(),(token.getColumna()+1), ", Se espera un valor entero o una operacion con resultado entero"));
    }

    private void referencia_numero_negativo(Token token,Double valor){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM,String.valueOf(valor.intValue()), token.getLinea(),(token.getColumna()+1), ", Se esperaba un valor positivo"));
    }

    private void referencia_numero_negativo_values(Token token,Double valor){
        this.lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM,valor.toString(), token.getLinea(),(token.getColumna()+1), ",Se espera un valor positivo o una operacion con resultado positivo"));
    }

    public ArrayList<OcurrenciaOperador> getOcurrencias() {
        return ocurrencias;
    }

    public ArrayList<Grafica> getGraficasGeneradas() {
        return graficasGeneradas;
    }

    public ArrayList<String> getGraficasEjecutar() {
        return graficasEjecutar;
    }

    private boolean buscarGrafica(String nombre){
        for (Grafica graficasGenerada : this.graficasGeneradas) {
            if(graficasGenerada.getTitulo().equals(nombre)){
                return true;
            }
        }
        return false;
    }

    protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserGraphics$actions {
  private final ParserGraphics parser;

  /** Constructor */
  CUP$ParserGraphics$actions(ParserGraphics parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserGraphics$do_action_part00000000(
    int                        CUP$ParserGraphics$act_num,
    java_cup.runtime.lr_parser CUP$ParserGraphics$parser,
    java.util.Stack            CUP$ParserGraphics$stack,
    int                        CUP$ParserGraphics$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserGraphics$result;

      /* select the action based on the action number */
      switch (CUP$ParserGraphics$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ej ::= ej EjeGraf 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ej",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ej EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		RESULT = start_val;
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserGraphics$parser.done_parsing();
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ej ::= s 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ej",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ej ::= ej error 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ej",1, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= s DefgrafBarra 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s ::= s DefgrafPie 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s ::= DefgrafBarra 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s ::= DefgrafPie 
            {
              Object RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EjeGraf ::= EXECUTE PA_A STRING PA_C PUNTOCOMA 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int gnleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int gnright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object gn = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		
                                                        System.out.println("Grafico ejecutar: "+(String)((Token)gn).getValue());
                                                        Token strin = (Token) gn;
                                                        Token exe = (Token) ex;
                                                        if(buscarGrafica((String) strin.getValue())){
                                                            graficasEjecutar.add((String) strin.getValue());
                                                        }else{
                                                            System.out.println("---La Grafica no existe");
                                                            execution_error_grap(exe, (String) strin.getValue());
                                                        }
                                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("EjeGraf",2, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DefgrafBarra ::= DEF GRAPHICBARRA contBarra LLA_C 
            {
              Grafica RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                                if(gb!=null){
                                                                    System.out.println("Grafica: "+gb.getTitulo());
                                                                    if(buscarGrafica(gb.getTitulo())){
                                                                        System.out.println("La Grafica: "+gb.getTitulo()+", ya existe");
                                                                        error_grap_def((Token) ini, gb.getTitulo());
                                                                    }else{
                                                                        if(!definition_error((Token)ini,(Token)fin,gb.verificarGrafica())){
                                                                            errorAnalisisesTmp = gb.analizarUnir();
                                                                            if(errorAnalisisesTmp.isEmpty()){
                                                                                gb.triangularUniones();
                                                                                graficasGeneradas.add(gb);
                                                                                System.out.println("Grafica Valida");
                                                                            }else{
                                                                                System.out.println("Grafica No Valida");
                                                                                for (ErrorAnalisis errorAnalisis : errorAnalisisesTmp) {
                                                                                    lexer.getErrors().push(errorAnalisis);
                                                                                }
                                                                            }
                                                                        }else{
                                                                            System.out.println("Grafica No Valida");
                                                                        }
                                                                    }
                                                                }
                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("DefgrafBarra",4, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DefgrafPie ::= DEF GRAPHICPIE contPie LLA_C 
            {
              Grafica RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                            if(gp!=null){
                                                                System.out.println("Grafica: "+gp.getTitulo());
                                                                if(buscarGrafica(gp.getTitulo())){
                                                                    System.out.println("La Grafica: "+gp.getTitulo()+", ya existe");
                                                                    error_grap_def((Token) ini, gp.getTitulo());
                                                                }else{
                                                                    if(!definition_error((Token)ini,(Token)fin,gp.verificarGrafica())){
                                                                        errorAnalisisesTmp = gp.analizarUnir();
                                                                        if(errorAnalisisesTmp.isEmpty()){
                                                                            gp.triangularUniones();
                                                                            if(gp.getTipo().equals("Porcentaje")){
                                                                                String errorVer = verficacionValuesPie.verficarPiePorcentaje(gp);
                                                                                if(errorVer.isEmpty()){
                                                                                    graficasGeneradas.add(gp);
                                                                                    System.out.println("Grafica Valida");
                                                                                }else{
                                                                                    System.out.println("Grafica No Valida");
                                                                                    lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, "unir",gp.getLinUnir(),gp.getColUnir(), errorVer));
                                                                                    //lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, "unir",((Token)ini).getLinea(), ((Token)ini).getColumna(), errorVer));
                                                                                }
                                                                            }else{
                                                                                String errorVer = verficacionValuesPie.verficarPieCantidad(gp);
                                                                                if(errorVer.isEmpty()){
                                                                                    graficasGeneradas.add(gp);
                                                                                    System.out.println("Grafica Valida");
                                                                                }else{
                                                                                    System.out.println("Grafica No Valida");
                                                                                    lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, "unir",gp.getLinUnir(),gp.getColUnir(), errorVer));
                                                                                    //lexer.getErrors().push(new ErrorAnalisis(ERROR_TYPE_SEM, "unir",((Token)ini).getLinea(), ((Token)ini).getColumna(), errorVer));
                                                                                }
                                                                            }
                                                                        }else{
                                                                            System.out.println("Grafica No Valida");
                                                                            for (ErrorAnalisis errorAnalisis : errorAnalisisesTmp) {
                                                                                lexer.getErrors().push(errorAnalisis);
                                                                            }
                                                                        }
                                                                    }else{
                                                                        System.out.println("Grafica No Valida");
                                                                    }
                                                                }
                                                            }
                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("DefgrafPie",3, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contBarra ::= contBarra TITTLE DOSPUNTOS STRING PUNTOCOMA 
            {
              GraficaBarra RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                            if(gb !=null){
                                                                                RESULT = gb;
                                                                                if(RESULT.getTitulo()!=null){
                                                                                    semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                }else{
                                                                                    String tittle = (String)((Token)titulo).getValue();
                                                                                    RESULT.setTitulo(tittle);
                                                                                }
                                                                            }
                                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contBarra ::= contBarra EJEX DOSPUNTOS contEjeX PUNTOCOMA 
            {
              GraficaBarra RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                if(gb !=null){
                                                                                    RESULT = gb;
                                                                                    if(RESULT.getEjex()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setEjex(pila.toArray(String[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contBarra ::= contBarra EJEY DOSPUNTOS contEjeY PUNTOCOMA 
            {
              GraficaBarra RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                if(gb !=null){
                                                                                    RESULT = gb;
                                                                                    if(RESULT.getEjey()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setEjey(pila.toArray(Double[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contBarra ::= contBarra LINK DOSPUNTOS CO_A contUnir PUNTOCOMA 
            {
              GraficaBarra RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		GraficaBarra gb = (GraficaBarra)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                
                                                                                if(gb !=null){
                                                                                    RESULT = gb;
                                                                                    if(RESULT.getUnir()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setUnir(pila.toArrayList());
                                                                                            RESULT.setLinUnir(((Token)e).getLinea());
                                                                                            RESULT.setColUnir(((Token)e).getColumna());
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contBarra ::= LLA_A 
            {
              GraficaBarra RESULT =null;
		
                                                                                RESULT = new GraficaBarra();
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // contBarra ::= contBarra error 
            {
              GraficaBarra RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contBarra ::= error PUNTOCOMA 
            {
              GraficaBarra RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contBarra",6, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contPie ::= contPie TITTLE DOSPUNTOS STRING PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                            if(gp!=null){
                                                                                RESULT = gp;
                                                                                if(RESULT.getTitulo()!=null){
                                                                                    semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                }else{
                                                                                    RESULT.setTitulo((String)((Token)titulo).getValue());
                                                                                }
                                                                            }
                                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contPie ::= contPie TYPE DOSPUNTOS TYPEVALUE PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                            if(gp!=null){
                                                                                RESULT = gp;
                                                                                if(RESULT.getTipo()!=null){
                                                                                    semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                }else{
                                                                                    RESULT.setTipo((String)((Token)tipo).getValue());
                                                                                }
                                                                                
                                                                            }
                                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contPie ::= contPie LABEL DOSPUNTOS contEjeX PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                
                                                                                if(gp!=null){
                                                                                    RESULT = gp;
                                                                                    if(RESULT.getEtiquetas()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setEtiquetas(pila.toArray(String[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contPie ::= contPie VALUES DOSPUNTOS contEjeY PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                
                                                                                if(gp!=null){
                                                                                    RESULT = gp;
                                                                                    if(RESULT.getValores()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setValores(pila.toArray(Double[].class));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // contPie ::= contPie TOTAL DOSPUNTOS e PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                    if(gp!=null){
                                                                        RESULT = gp;
                                                                        if(RESULT.getTotal()!=null){
                                                                            semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                        }else{
                                                                            if(num!=null){
                                                                                RESULT.setTotal(num);
                                                                            }
                                                                        }
                                                                    }
                                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // contPie ::= contPie LINK DOSPUNTOS CO_A contUnir PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                                
                                                                                if(gp!=null){
                                                                                    RESULT = gp;
                                                                                    if(RESULT.getUnir()!=null){
                                                                                        semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                                    }else{
                                                                                        if(pila!=null){
                                                                                            RESULT.setUnir(pila.toArrayList());
                                                                                            RESULT.setLinUnir(((Token)e).getLinea());
                                                                                            RESULT.setColUnir(((Token)e).getColumna());
                                                                                        }
                                                                                    }
                                                                                }
                                                                                
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contPie ::= contPie EXTRA DOSPUNTOS STRING PUNTOCOMA 
            {
              GraficaPie RESULT =null;
		int gpleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		GraficaPie gp = (GraficaPie)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int extraleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int extraright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object extra = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                                                        if(gp!=null){
                                                                            RESULT = gp;
                                                                            if(RESULT.getExtra()!=null){
                                                                                semantic_error(((Token)e),"La propiedad ya habia sido definida en el grafico");
                                                                            }else{
                                                                                RESULT.setExtra((String)((Token)extra).getValue());
                                                                            }
                                                                        }
                                                                    
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contPie ::= LLA_A 
            {
              GraficaPie RESULT =null;
		
                            RESULT = new GraficaPie();
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contPie ::= contPie error 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contPie ::= error PUNTOCOMA 
            {
              GraficaPie RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contPie",5, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // e ::= e MAS t 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                Token operador = (Token) s;
                                if(num2!=null&&num1!=null){
                                    String ocu = operador.getAntToken().getLexema() + " + " +num2.getToken().getLexema();
                                    ocurrencias.add(new OcurrenciaOperador("MAS",operador.getLinea(),operador.getColumna(),ocu));
                                    RESULT = num1+num2.getValue();
                                }
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // e ::= e MENOS t 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                    Token operador = (Token) s;
                                    if(num2!=null&&num1!=null){
                                        String ocu = operador.getAntToken().getLexema() + " - " +num2.getToken().getLexema();
                                        ocurrencias.add(new OcurrenciaOperador("MENOS",operador.getLinea(),operador.getColumna(),ocu));
                                        RESULT = num1-num2.getValue();
                                    }
                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // e ::= t 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion exp = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                if(exp!=null){
                                    RESULT = exp.getValue();
                                }
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // e ::= error 
            {
              Double RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // t ::= t MUL f 
            {
              InicioOperacion RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		InicioOperacion num1 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                Token operador = (Token) s;
                                if(num1!=null&&num2!=null){
                                    num2.setValue(num1.getValue()*num2.getValue());
                                    String ocu = operador.getAntToken().getLexema() + " * " +num2.getToken().getLexema();
                                    ocurrencias.add(new OcurrenciaOperador("Multiplicación",operador.getLinea(),operador.getColumna(),ocu));
                                }
                                RESULT = num2;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",15, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // t ::= t DIV f 
            {
              InicioOperacion RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		InicioOperacion num1 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                Token operador = (Token) s;
                                if(num1!=null&&num2!=null){
                                    num2.setValue(num1.getValue()/num2.getValue());
                                    String ocu = operador.getAntToken().getLexema() + " / " +num2.getToken().getLexema();
                                    ocurrencias.add(new OcurrenciaOperador("División",operador.getLinea(),operador.getColumna(),ocu));
                                }
                                RESULT = num2;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",15, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // t ::= f 
            {
              InicioOperacion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion exp = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = exp;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("t",15, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // f ::= NUMBERS 
            {
              InicioOperacion RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                            Token tmp = (Token) num;
                            RESULT = new InicioOperacion((Double) tmp.getValue(),tmp);
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",16, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // f ::= DECIMAL 
            {
              InicioOperacion RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                            Token tmp = (Token) num;
                            RESULT = new InicioOperacion((Double) tmp.getValue(),tmp);
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",16, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // f ::= PA_A e PA_C 
            {
              InicioOperacion RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                RESULT = new InicioOperacion(exp,(Token)ini);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",16, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // f ::= error f 
            {
              InicioOperacion RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("f",16, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // contEjeY ::= CO_A e contEjeY2 
            {
              Pila<Double> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                    RESULT = pila;
                                                    if(RESULT!=null){
                                                        if(num1!=null){
                                                            if(num1<0){
                                                                referencia_numero_negativo_values((Token)ref,num1);
                                                            }
                                                            RESULT.push(num1);
                                                        }else{
                                                            RESULT.push(num1);
                                                        }  
                                                    }
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeY",7, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contEjeY2 ::= COMA e contEjeY2 
            {
              Pila<Double> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<Double> pila = (Pila<Double>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                    RESULT = pila;
                                                    if(RESULT!=null){
                                                        if(num1!=null){
                                                            if(num1<0){
                                                                referencia_numero_negativo_values((Token)ref,num1);
                                                            }
                                                            RESULT.push(num1);
                                                        }else{
                                                            RESULT.push(num1);
                                                        }
                                                    }
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeY2",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contEjeY2 ::= CO_C 
            {
              Pila<Double> RESULT =null;
		
                                                    RESULT = new Pila<>();
                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeY2",8, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // contEjeX ::= CO_A STRING contEjeX2 
            {
              Pila<String> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                            RESULT = pila;
                                                            if(RESULT!=null){
                                                                String strin = (String)((Token)cadena).getValue();
                                                                RESULT.push(strin);  
                                                            }
                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeX",9, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // contEjeX2 ::= COMA STRING contEjeX2 
            {
              Pila<String> RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<String> pila = (Pila<String>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                            RESULT = pila;
                                                            if(RESULT!=null){
                                                                String strin = (String)((Token)cadena).getValue();
                                                                RESULT.push(strin);  
                                                            }
                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeX2",10, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // contEjeX2 ::= CO_C 
            {
              Pila<String> RESULT =null;
		
                                                            RESULT = new Pila<>();
                                                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contEjeX2",10, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contUnir ::= LLA_A ee COMA ee LLA_C contUnir2 
            {
              Pila<Union> RESULT =null;
		int ref1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int ref1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		Object ref1 = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int ref2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int ref2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object ref2 = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                                                RESULT = pila;
                                                                                if(RESULT!=null){
                                                                                    if(num1!=null && num2!=null){
                                                                                        if(num1>=0 && num2>=0){
                                                                                            Double mod1 = num1 % 2;
                                                                                            Double mod2 = num2 % 2;
                                                                                            if((mod1==1||mod1==0)&&(mod2==1||mod2==0)){
                                                                                                System.out.println("Los dos datos son enteros");
                                                                                                Token tok = (Token)ref1;
                                                                                                RESULT.push(new Union(num1.intValue(),num2.intValue(),tok.getLinea(),tok.getColumna()));
                                                                                            }else{
                                                                                                if(!(mod1==1||mod1==0)){
                                                                                                    referencia_numerica_incorrecta((Token) ref1, num1);
                                                                                                }
                                                                                                if(!(mod2==1||mod2==0)){
                                                                                                    referencia_numerica_incorrecta((Token) ref2, num2);
                                                                                                }
                                                                                            }
                                                                                        }else{
                                                                                            if(num1<0){
                                                                                                referencia_numero_negativo((Token) ref1, num1);
                                                                                            }
                                                                                            if(num2<0){
                                                                                                referencia_numero_negativo((Token) ref2, num2);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contUnir",11, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // contUnir2 ::= COMA LLA_A ee COMA ee LLA_C contUnir2 
            {
              Pila<Union> RESULT =null;
		int ref1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).left;
		int ref1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).right;
		Object ref1 = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-5)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-4)).value;
		int ref2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).left;
		int ref2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).right;
		Object ref2 = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Pila<Union> pila = (Pila<Union>)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                                                                    RESULT = pila;
                                                                                    if(RESULT!=null){
                                                                                        if(num1!=null && num2!=null){
                                                                                            if(num1>=0 && num2>=0){
                                                                                                Double mod1 = num1 % 2;
                                                                                                Double mod2 = num2 % 2;
                                                                                                if((mod1==1||mod1==0)&&(mod2==1||mod2==0)){
                                                                                                    System.out.println("Los dos datos son enteros");
                                                                                                    Token tok = (Token)ref1;
                                                                                                    RESULT.push(new Union(num1.intValue(),num2.intValue(),tok.getLinea(),tok.getColumna()));
                                                                                                }else{
                                                                                                    if(!(mod1==1||mod1==0)){
                                                                                                        referencia_numerica_incorrecta((Token) ref1, num1);
                                                                                                    }
                                                                                                    if(!(mod2==1||mod2==0)){
                                                                                                        referencia_numerica_incorrecta((Token) ref2, num2);
                                                                                                    }
                                                                                                }
                                                                                            }else{
                                                                                                if(num1<0){
                                                                                                    referencia_numero_negativo((Token) ref1, num1);
                                                                                                }
                                                                                                if(num2<0){
                                                                                                    referencia_numero_negativo((Token) ref2, num2);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contUnir2",12, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-6)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contUnir2 ::= CO_C 
            {
              Pila<Union> RESULT =null;
		
                            RESULT = new Pila<>();
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contUnir2",12, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contUnir2 ::= error contUnir2 
            {
              Pila<Union> RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("contUnir2",12, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ee ::= ee MAS te 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                Token operador = (Token) s;
                                if(num2!=null&&num1!=null){
                                    String ocu = operador.getAntToken().getLexema() + " + " +num2.getToken().getLexema();
                                    ocurrencias.add(new OcurrenciaOperador("MAS",operador.getLinea(),operador.getColumna(),ocu));
                                    RESULT = num1+num2.getValue();
                                }
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ee",14, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ee ::= ee MENOS te 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                    Token operador = (Token) s;
                                    if(num2!=null&&num1!=null){
                                        String ocu = operador.getAntToken().getLexema() + " - " +num2.getToken().getLexema();
                                        ocurrencias.add(new OcurrenciaOperador("MENOS",operador.getLinea(),operador.getColumna(),ocu));
                                        RESULT = num1-num2.getValue();
                                    }
                                
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ee",14, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ee ::= te 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion exp = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                if(exp!=null){
                                    RESULT = exp.getValue();
                                }
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ee",14, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ee ::= error 
            {
              Double RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("ee",14, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // te ::= te MUL fe 
            {
              InicioOperacion RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		InicioOperacion num1 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                Token operador = (Token) s;
                                if(num1!=null&&num2!=null){
                                    num2.setValue(num1.getValue()*num2.getValue());
                                    String ocu = operador.getAntToken().getLexema() + " * " +num2.getToken().getLexema();
                                    ocurrencias.add(new OcurrenciaOperador("Multiplicación",operador.getLinea(),operador.getColumna(),ocu));
                                }
                                RESULT = num2;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("te",17, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // te ::= te DIV fe 
            {
              InicioOperacion RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		InicioOperacion num1 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion num2 = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                Token operador = (Token) s;
                                if(num1!=null&&num2!=null){
                                    num2.setValue(num1.getValue()/num2.getValue());
                                    String ocu = operador.getAntToken().getLexema() + " / " +num2.getToken().getLexema();
                                    ocurrencias.add(new OcurrenciaOperador("División",operador.getLinea(),operador.getColumna(),ocu));
                                }
                                RESULT = num2;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("te",17, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // te ::= fe 
            {
              InicioOperacion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		InicioOperacion exp = (InicioOperacion)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                                RESULT = exp;
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("te",17, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // fe ::= NUMBERS 
            {
              InicioOperacion RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.peek()).value;
		
                            Token tmp = (Token) num;
                            RESULT = new InicioOperacion((Double) tmp.getValue(),tmp);
                        
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("fe",18, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fe ::= PA_A e PA_C 
            {
              InicioOperacion RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)).value;
		
                                RESULT = new InicioOperacion(exp,(Token)ini);
                            
              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("fe",18, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fe ::= error f 
            {
              InicioOperacion RESULT =null;

              CUP$ParserGraphics$result = parser.getSymbolFactory().newSymbol("fe",18, ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.elementAt(CUP$ParserGraphics$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGraphics$stack.peek()), RESULT);
            }
          return CUP$ParserGraphics$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserGraphics$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserGraphics$do_action(
    int                        CUP$ParserGraphics$act_num,
    java_cup.runtime.lr_parser CUP$ParserGraphics$parser,
    java.util.Stack            CUP$ParserGraphics$stack,
    int                        CUP$ParserGraphics$top)
    throws java.lang.Exception
    {
              return CUP$ParserGraphics$do_action_part00000000(
                               CUP$ParserGraphics$act_num,
                               CUP$ParserGraphics$parser,
                               CUP$ParserGraphics$stack,
                               CUP$ParserGraphics$top);
    }
}

}
